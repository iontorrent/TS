#!/usr/bin/env python
# Copyright (C) 2010 Ion Torrent Systems, Inc. All Rights Reserved

import json
import optparse
import os
import requests
import sys
import time
import traceback

if __name__ == '__main__':
    options = optparse.OptionParser(description='Update a plugins status and json dataStore through the ionPlugin daeamon')
    options.add_option('-u', '--host', dest='host', action='store', default=None)
    options.add_option('-s', '--state', dest='state', action='store', default=None)
    options.add_option('-a', '--apikey', dest='apikey', action='store', default=None)
    options.add_option('-p', '--pk', dest='pk', action='store', default=None)
    (options, argv) = options.parse_args(sys.argv)

    # reusable request data structures
    auth_params = {'pluginresult': options.pk, 'api_key': options.apikey}
    json_headers = {'content-type': 'application/json'}

    # update the store data in the plugin result if there is store data to ... store
    results_file_path = os.path.join(os.getcwd(), 'results.json')
    if os.path.exists(results_file_path):
        try:
            store_data = {}
            with open(results_file_path, 'r') as f:
                store_data = json.load(f)

            if store_data:
                store_response = requests.patch(options.host + "/rundb/api/v1/pluginresult/" + str(options.pk) + "/", headers=json_headers, params=auth_params, data=json.dumps({'store': store_data}))
                store_response.raise_for_status()
        except Exception as exc:
            traceback.print_exc()

    attempts = 0
    while attempts < 10:
        attempts += 1

        try:
            # query based on the jobid to get the resource url
            job_query_response = requests.get(options.host + "/rundb/api/v1/PluginResultJob/", params={'grid_engine_jobid': os.environ['JOB_ID'], 'pluginresult': options.pk, 'api_key': options.apikey})
            job_query_response.raise_for_status()
            job_query = job_query_response.json()
            resource_uri = job_query['objects'][0]['resource_uri']

            # send the patch request
            data = json.dumps({'state': options.state})
            job_patch_response = requests.patch(options.host + resource_uri, headers=json_headers, params=auth_params, data=data)
            job_patch_response.raise_for_status()

            # we are exiting here which is our happy path...
            sys.exit()
        except Exception as exc:
            traceback.print_exc()
            time.sleep(5)

    # if we made it here and did not exit as part of the try loop then we can assume that we ran out of attempts
    print("After many attempts the status was not able to be updated.")
