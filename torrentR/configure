#!/bin/bash
if [ -z $TS_SOURCE_ROOT ]
then
  echo "ERROR: TS_SOURCE_ROOT is missing"
fi

if [$BUILDTOOLS_INC == ""]
then
  BUILDTOOLS_INC=$TS_SOURCE_ROOT/buildTools
fi

if [$ANALYSIS_INC == ""]
then
  ANALYSIS_INC=$TS_SOURCE_ROOT/Analysis
fi

if [$ANALYSIS_ORG_INC == ""]
then
  ANALYSIS_ORG_INC=$TS_SOURCE_ROOT/Analysis/AnalysisOrg
fi

if [$BKGMODEL_INC == ""]
then
  BKGMODEL_INC=$TS_SOURCE_ROOT/Analysis/BkgModel
fi

if [$BKGMODEL_MATH_INC == ""]
then
  BKGMODEL_MATH_INC=$TS_SOURCE_ROOT/Analysis/BkgModel/MathModel
fi

if [$BKGMODEL_FITTERS_INC == ""]
then
  BKGMODEL_FITTERS_INC=$TS_SOURCE_ROOT/Analysis/BkgModel/Fitters
fi

if [$BKGMODEL_WRITERS_INC == ""]
then
  BKGMODEL_WRITERS_INC=$TS_SOURCE_ROOT/Analysis/BkgModel/Writers
fi

if [$BKGMODEL_BOOK_INC == ""]
then
  BKGMODEL_BOOK_INC=$TS_SOURCE_ROOT/Analysis/BkgModel/Bookkeeping
fi

if [$CLONALFILTER_INC == ""]
then
  CLONALFILTER_INC=$TS_SOURCE_ROOT/Analysis/ClonalFilter
fi

if [$PHASE_INC == ""]
then
  PHASE_INC=$TS_SOURCE_ROOT/Analysis/BaseCaller
fi

if [$RECALIBRATION_INC == ""]
then
  RECALIBRATION_INC=$TS_SOURCE_ROOT/Analysis/Calibration
fi

if [$ANALYSIS_IMAGE == ""]
then
  ANALYSIS_IMAGE=$TS_SOURCE_ROOT/Analysis/Image
fi

if [$ANALYSIS_MASK == ""]
then
  ANALYSIS_MASK=$TS_SOURCE_ROOT/Analysis/Mask
fi

if [$ANALYSIS_LIB == ""]
then
  ANALYSIS_LIB=$TS_BUILD_ROOT/Analysis
fi

if [${UTIL_INC} == ""]
then
  UTIL_INC=$TS_SOURCE_ROOT/Analysis/Util
fi

if [${WELLS_INC} == ""]
then
  WELLS_INC=$TS_SOURCE_ROOT/Analysis/Wells
fi

if [$ANALYSIS_REPLAY_INC == ""]
then
  ANALYSIS_REPLAY_INC=$TS_SOURCE_ROOT/Analysis/Replay
fi

if [$ANALYSIS_SEPARATOR_INC == ""]
then
  ANALYSIS_SEPARATOR_INC=$TS_SOURCE_ROOT/Analysis/Separator
fi

if [$BUILD_INC == ""]
then
  BUILD_INC=$TS_BUILD_ROOT/torrentR
fi


if [$ARMADILLO_INC == ""]
then
    ARMADILLO_INC=$TS_BUILD_ROOT/armadillo-6.100.0+ion1-install/include
fi

if [$HDF5_INC == ""]
then
    # custom hdf5 library
    CODENAME=`lsb_release -cs`
    if [ $CODENAME == "" ]; then
        HDF5_INC=$TS_BUILD_ROOT/hdf5-1.8.11-install/include
        HDF5_LIB=$TS_BUILD_ROOT/hdf5-1.8.11-install/lib/libhdf5.a
    elif [ $CODENAME == "xenial"  ]; then
        HDF5_INC=/usr/include/hdf5/serial
        HDF5_LIB=/usr/lib/x86_64-linux-gnu/libhdf5_serial.so
    elif [ $CODENAME == "bionic" ]; then 
        HDF5_INC=/usr/include/hdf5/serial
        HDF5_LIB=/usr/lib/x86_64-linux-gnu/hdf5/serial/libhdf5.so
    else
        HDF5_INC=/usr/include
        HDF5_LIB=-lhdf5

    fi
fi

if [$BAMTOOLS_ROOT == ""]
then
    CODENAME=`lsb_release -cs`
    if [ $CODENAME == "bionic" ]; then
        BAMTOOLS_ROOT=$TS_BUILD_ROOT/bamtools-2.4.2.20190207+git740562a67a3-install
    else
        BAMTOOLS_ROOT=$TS_BUILD_ROOT/bamtools-2.4.0.20150702+git15eadb925f-install
    fi
    BAMTOOLS_INC=$BAMTOOLS_ROOT/include/bamtools
    BAMTOOLS_LIB=$BAMTOOLS_ROOT/lib/bamtools
fi

if [$JSON_INC == ""]
then
    JSON_INC=$TS_SOURCE_ROOT/external/jsoncpp-src-amalgated0.6.0-rc1
fi


PKG_CPPFLAGS=`${R_HOME}/bin/Rscript -e "Rcpp:::CxxFlags()"`" -I$BAMTOOLS_INC -I$ANALYSIS_INC -I$ANALYSIS_IMAGE -I$ANALYSIS_MASK -I$ANALYSIS_ORG_INC -I$BUILDTOOLS_INC -I$BKGMODEL_INC -I$BKGMODEL_FITTERS_INC -I$BKGMODEL_WRITERS_INC -I$BKGMODEL_BOOK_INC -I$BKGMODEL_MATH_INC -I$CLONALFILTER_INC -I$PHASE_INC -I$RECALIBRATION_INC -I$WELLS_INC -I$UTIL_INC -I${BUILD_INC} -I${ANALYSIS_REPLAY_INC} -I$ANALYSIS_SEPARATOR_INC -I$HDF5_INC -I$ARMADILLO_INC -I$JSON_INC -Wall -g -std=c++11"

CPPFLAGS=-O2

PKG_LIBS=`${R_HOME}/bin/Rscript -e "Rcpp:::LdFlags()"`" $ANALYSIS_LIB/libion-analysis.a $ANALYSIS_LIB/libfile-io.a $HDF5_LIB $BAMTOOLS_LIB/libbamtools.a -llapack -lblas -L/usr/lib"

sed -e "s|@PKG_LIBS@|${PKG_LIBS}|" \
    -e "s|@PKG_CPPFLAGS@|${PKG_CPPFLAGS}|" \
    src/Makevars.in > src/Makevars
