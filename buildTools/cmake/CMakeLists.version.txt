# Copyright (C) 2010 Ion Torrent Systems, Inc. All Rights Reserved

include(../buildTools/cmake/CMakeLists.installpath.txt)

# get the torrent suite version numbers
execute_process(COMMAND "grep" "TS_MAJOR"   "${PROJECT_SOURCE_DIR}/../TSVersion"
                COMMAND "sed" "s/^TS_MAJOR=//"
                OUTPUT_VARIABLE TS_MAJOR
                OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND "grep" "TS_MINOR"   "${PROJECT_SOURCE_DIR}/../TSVersion"
                COMMAND "sed" "s/^TS_MINOR=//"
                OUTPUT_VARIABLE TS_MINOR
                OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND "grep" "TS_RELEASE" "${PROJECT_SOURCE_DIR}/../TSVersion"
                COMMAND "sed" "s/^TS_RELEASE=//"
                OUTPUT_VARIABLE TS_RELEASE
                OUTPUT_STRIP_TRAILING_WHITESPACE)

# Figure out state of current build
execute_process(COMMAND "hostname" "-f"
                OUTPUT_VARIABLE BUILDHOST
                OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND "date" "-u" "+%Y%m%d%H%M"
                OUTPUT_VARIABLE BUILDDATE
                OUTPUT_STRIP_TRAILING_WHITESPACE)

execute_process(COMMAND "git" "rev-parse" "--show-toplevel"
                WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
                RESULT_VARIABLE res
                OUTPUT_VARIABLE IonVersion_WC_ROOT
                ERROR_QUIET
                OUTPUT_STRIP_TRAILING_WHITESPACE)

if(res EQUAL 0)
        # Pure GIT repo - Build script should tag releases,
        # otherwise returns short sha1 hash
        execute_process(COMMAND "git" "rev-parse" "--short" "HEAD"
                        WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
                        OUTPUT_VARIABLE IonVersion_WC_REVISION
                        ERROR_VARIABLE git_info_error
                        OUTPUT_STRIP_TRAILING_WHITESPACE)

        # Assumes remote is named "origin"
        execute_process(COMMAND "git" "config" "--get" "remote.origin.url"
                        WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
                        OUTPUT_VARIABLE IonVersion_WC_URL
                        ERROR_VARIABLE git_info_error
                        OUTPUT_STRIP_TRAILING_WHITESPACE)
else()
    # else not a working copy!
    set(IonVersion_WC_URL ".")
    set(IonVersion_WC_REVISION "SNAPSHOT")
endif()

execute_process(COMMAND "grep" "MAJOR" "${PROJECT_SOURCE_DIR}/version"
                COMMAND "sed" "s/^MAJOR=//"
                OUTPUT_VARIABLE MAJOR
                OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND "grep" "MINOR" "${PROJECT_SOURCE_DIR}/version"
                COMMAND "sed" "s/^MINOR=//"
                OUTPUT_VARIABLE MINOR
                OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND "grep" "RELEASE" "${PROJECT_SOURCE_DIR}/version"
                COMMAND "sed" "s/^RELEASE=//"
                OUTPUT_VARIABLE RELEASE
                OUTPUT_STRIP_TRAILING_WHITESPACE)

# Variables which user can override - values persist between builds only if explicitly set
set (BUILDTAG 0 CACHE STRING "The build tag string. EG TSRC.")
if(BUILDTAG)
    set (ION_VERSION_BUILDTAG "${BUILDTAG}" CACHE INTERNAL "Build Tag" FORCE)
else()
    set (ION_VERSION_BUILDTAG "DEV-${BUILDHOST}" CACHE INTERNAL "Build Tag" FORCE)
endif()
set (BUILDNUM 0 CACHE STRING "The build number or date.")
if(BUILDNUM)
    set (ION_VERSION_BUILDNUM "${BUILDNUM}" CACHE INTERNAL "Build Number or Date" FORCE)
else()
    set (ION_VERSION_BUILDNUM "${BUILDDATE}" CACHE INTERNAL "Build Number or Date" FORCE)
endif()

# Variables which we always update between builds
set (ION_VERSION_MAJOR "${MAJOR}" CACHE INTERNAL "Version Major Number" FORCE)
set (ION_VERSION_MINOR "${MINOR}" CACHE INTERNAL "Version Minor Number" FORCE)
set (ION_VERSION_RELEASE "${RELEASE}" CACHE INTERNAL "Version Release Number" FORCE)
set (ION_VERSION_GITURL "${IonVersion_WC_URL}" CACHE INTERNAL "GIT URL" FORCE)
set (ION_VERSION_GITHASH "${IonVersion_WC_REVISION}" CACHE INTERNAL "GIT Hash" FORCE)
set (ION_VERSION_BUILDHOST "${BUILDHOST}" CACHE INTERNAL "Host the build was done on" FORCE)
string(REPLACE "${IonVersion_WC_ROOT}" "" ION_VERSION_GIT_PATH "${IonVersion_WC_URL}")
# If we include this, it will force rebuilds when ever the date value changes -- eg every min
#set (ION_VERSION_BUILDDATE "${BUILDDATE}" CACHE INTERNAL "The date of the build" FORCE)

# Version config files
configure_file (
    "${PROJECT_SOURCE_DIR}/../buildTools/IonVersion.h.in"
    "${PROJECT_BINARY_DIR}/IonVersion.h" @ONLY
)
configure_file (
    "${PROJECT_SOURCE_DIR}/../buildTools/IonVersion.cpp.in"
    "${PROJECT_BINARY_DIR}/IonVersion.cpp" @ONLY
)
configure_file (
    "${PROJECT_SOURCE_DIR}/../buildTools/IonVersion.env.in"
    "${PROJECT_BINARY_DIR}/IonTorrent/IonVersion.env" @ONLY
)
install(FILES "${PROJECT_BINARY_DIR}/IonTorrent/IonVersion.env" DESTINATION ${ION_INSTALL_PREFIX}/bin
    RENAME ${CMAKE_PROJECT_NAME}.version.env
)

# Custom target. Any target which uses version info should depend on this
add_custom_target(IONVERSION ALL COMMAND "make" "rebuild_cache")
