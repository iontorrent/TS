# Copyright (C) 2010 Ion Torrent Systems, Inc. All Rights Reserved
# Set a default build type for single-configuration
# CMake generators if no build type is set.
IF(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
   SET(CMAKE_BUILD_TYPE Release)
ENDIF()

find_program(LSB_RELEASE_COMMAND lsb_release)
if(LSB_RELEASE_COMMAND)
    execute_process(COMMAND ${LSB_RELEASE_COMMAND} -s -c
                    OUTPUT_VARIABLE TMP_LSB_RELEASE_CODENAME
                    OUTPUT_STRIP_TRAILING_WHITESPACE)
    string(TOLOWER ${TMP_LSB_RELEASE_CODENAME} LSB_RELEASE_CODENAME)
    message(STATUS "LSB release codename: ${LSB_RELEASE_CODENAME}")
endif(LSB_RELEASE_COMMAND)

# Common compiler flags
# char is per default signed on x86_64 systems but unsigned on ARM, use signed-char
# TODO: need to enable bionic with -Werror
if (${LSB_RELEASE_CODENAME} STREQUAL "trusty" OR
    ${LSB_RELEASE_CODENAME} STREQUAL "xenial")
    set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -Wall -Wextra -Werror -fPIC -fsigned-char -Wno-deprecated-declarations")
else()
    set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -Wall -Wextra -fPIC -fsigned-char")
endif()

if ("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
    # http://gcc.gnu.org/onlinedocs/gcc-4.8.4/gcc/i386-and-x86-64-Options.html#i386-and-x86-64-Options
    # GCC depresses SSEx instructions when -mavx is used.
    # Instead it generates new AVX instructions or AVX equivalence for all SSEx instructions when needed.
    if("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64")
        if (ION_AVX)
            set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -mavx")
        else()
            set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -msse3")
        endif()
    endif()
#    set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -mfloat-abi=softfp -mfpu=neon")

    if(CMAKE_C_COMPILER_VERSION VERSION_EQUAL 4.9 OR (CMAKE_C_COMPILER_VERSION VERSION_GREATER 4.9))
        set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -fdiagnostics-color=always")
#        set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -Wvla")
#        set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -O3 -ftree-vectorize -ftree-vectorizer-verbose=0")
    endif()
elseif ("${CMAKE_C_COMPILER_ID}" STREQUAL "Intel")
    # https://software.intel.com/en-us/intel-cplusplus-compiler-16.0-user-and-reference-guide
    # https://software.intel.com/en-us/node/581723 # Code Generation Options
    # If you specify both the -ax and -m options, the baseline code will execute on non-Intel processors
    # compatible with the setting specified for the -m option.
    if("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64")
        if (ION_AVX)
            set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -axAVX,SSE4.2 -msse3")
        else()
            set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -msse3")
        endif()
    endif()
    set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -opt-report0")
elseif ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
    # http://clang.llvm.org/docs/CommandGuide/clang.html
    if("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64")
        if (ION_AVX)
            set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -mavx")
        else()
            set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -msse3")
        endif()
    endif()
else()
    if("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64")
        if (ION_AVX)
            set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -mavx")
        else()
            set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -msse3")
        endif()
    endif()
endif()

message(STATUS "common compiler flags: ${ION_COMMON_FLAGS}")

set(CUDA_PROPAGATE_HOST_FLAGS OFF)

## NOTE: -O2 enables strict-aliasing, and code is not clean
if (${LSB_RELEASE_CODENAME} STREQUAL "bionic")
  SET( CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS}
                     "-D_MWAITXINTRIN_H_INCLUDED" "-D_FORCE_INLINES" "-std=c++11" "-O2" "--compiler-options=-fno-strict-aliasing" "-g" "--use_fast_math"
                     "-gencode=arch=compute_30,code=sm_30"
                     "-gencode=arch=compute_35,code=sm_35"
                     "-gencode=arch=compute_50,code=sm_50"
                     "-gencode=arch=compute_52,code=sm_52"
                     "-gencode=arch=compute_52,code=compute_52"
                     "-gencode=arch=compute_61,code=sm_61"
                     "-gencode=arch=compute_75,code=sm_75"
                     "-maxrregcount=48" )
else()
  SET( CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS}
                     "-Wno-deprecated-gpu-targets"
                     "-D_MWAITXINTRIN_H_INCLUDED" "-D_FORCE_INLINES" "-std=c++11" "-O2" "--compiler-options=-fno-strict-aliasing" "-g" "--use_fast_math"
                     "-gencode=arch=compute_20,code=sm_20"
                     "-gencode=arch=compute_30,code=sm_30"
                     "-gencode=arch=compute_35,code=sm_35"
                     "-gencode=arch=compute_50,code=sm_50"
                     "-gencode=arch=compute_52,code=sm_52"
                     "-gencode=arch=compute_52,code=sm_52"
                     "-gencode=arch=compute_60,code=sm_60"
                     "-gencode=arch=compute_61,code=sm_61"
                     "-gencode=arch=compute_61,code=compute_61"
                     "-maxrregcount=48" )
endif()

## If user set CXX on command line, make sure NVCC respects it
## (necessary for compiling on systems where default compiler is not nvcc compatible)
if($ENV{CXX} MATCHES ".+")
    LIST(APPEND CUDA_NVCC_FLAGS --compiler-bindir $ENV{CXX})
endif() #($ENV{CXX} MATCHES ".+")

if( HAS_MALIGN_DOUBLE )
    add_definitions(-malign-double) ## See CUDA 4.0 Release Nodes
endif()


# Add any C specific flags here
set(ION_C_FLAGS "${ION_C_FLAGS} -std=gnu11 -Wno-sign-compare -Wno-unused-variable -Wno-unused-parameter")

if ("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
    # https://gcc.gnu.org/wiki/C11Status
#    set(ION_C_FLAGS "${ION_C_FLAGS} -ansi -pedantic)
    set(ION_C_FLAGS "${ION_C_FLAGS} -Wno-unused-result")
    set(ION_C_FLAGS "${ION_C_FLAGS} -Wno-error=unused-but-set-variable")
endif()

if ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
    set(ION_C_FLAGS "${ION_C_FLAGS} -Wno-unused-function")
endif()

if ("${CMAKE_C_COMPILER_ID}" STREQUAL "Intel")
endif()


# Add any C++ specific flags here
set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -std=c++11 -Wno-unused-parameter")

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
#    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -ansi -pedantic")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-unused-variable")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-unused-function")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-error=unused-but-set-variable")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-error=unused-but-set-parameter")
endif()

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
#    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-gnu")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-unused-private-field")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-unused-value")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-unused-function")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-unused-variable")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-mismatched-tags")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-sign-compare")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-char-subscripts")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-format")
endif()

# ICC workaround
# /usr/include/c++/4.8$ sudo ln -s /usr/include/x86_64-linux-gnu/c++/4.8 x86_64-linux-gnu

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -wd239")   # 239: floating point underflow
endif()


set(ION_COMMON_FLAGS_DEBUG "${ION_COMMON_FLAGS} -O0 -g -DION_DEBUG")
set(ION_COMMON_FLAGS_RELEASE "${ION_COMMON_FLAGS} -O3 -g")
set(ION_COMMON_FLAGS_PROFILE "${ION_COMMON_FLAGS} -O3 -g -lprofiler")
set(CMAKE_SHARED_LINKER_FLAGS "-Wall ")

set(CMAKE_C_FLAGS_DEBUG "${ION_COMMON_FLAGS_DEBUG} ${ION_C_FLAGS}")
set(CMAKE_C_FLAGS_RELEASE "${ION_COMMON_FLAGS_RELEASE} ${ION_C_FLAGS}")
set(CMAKE_C_FLAGS_PROFILE "${ION_COMMON_FLAGS_PROFILE} ${ION_C_FLAGS}")

set(CMAKE_CXX_FLAGS_DEBUG "${ION_COMMON_FLAGS_DEBUG} ${ION_CXX_FLAGS}")
set(CMAKE_CXX_FLAGS_RELEASE "${ION_COMMON_FLAGS_RELEASE} ${ION_CXX_FLAGS}")
set(CMAKE_CXX_FLAGS_PROFILE "${ION_COMMON_FLAGS_PROFILE} ${ION_CXX_FLAGS}")

message("DEBUG CXXFLAGS ${CMAKE_CXX_FLAGS_DEBUG}")
message("RELEASE CXXFLAGS ${CMAKE_CXX_FLAGS_RELEASE}")

