# Copyright (C) 2013 Ion Torrent Systems, Inc. All Rights Reserved

set (ION_TS_EXTERNAL "${PROJECT_SOURCE_DIR}/../external/")
#set (ION_TS_EXTERNAL "${CMAKE_BINARY_DIR}/external/")

if(NOT ION_UPDATE_SERVER)
    set(ION_UPDATE_SERVER "updates.iontorrent.com") # internal developer can use just "updates"
endif()

# Use the closest ION_UPDATE_SERVER we can find.
#message(STATUS "Searching for an ION_UPDATE_SERVER...")
#foreach ( SERVER updates updates.itw updates.iontorrent.com )
#    # See if we can look up the server in question.
#    execute_process( COMMAND host -W 2 -t A ${SERVER}
#       RESULT_VARIABLE NOT_FOUND OUTPUT_QUIET ERROR_QUIET )
#
#    # If we can find it, great! We're done!
#    if ( NOT ${NOT_FOUND} )
#       set( ION_UPDATE_SERVER ${SERVER} )
#       break()
#    endif()
#endforeach()

# If we find a server, let everyone know.
if (ION_UPDATE_SERVER)
    message(STATUS "Using ION_UPDATE_SERVER: ${ION_UPDATE_SERVER}")
else()
    message(WARNING "Could not find a valid ION_UPDATE_SERVER.")
endif()

include(ExternalProject)

find_program(LSB_RELEASE_COMMAND lsb_release)
if(LSB_RELEASE_COMMAND)
    execute_process(COMMAND ${LSB_RELEASE_COMMAND} -s -c
        OUTPUT_VARIABLE TMP_LSB_RELEASE_CODENAME
        OUTPUT_STRIP_TRAILING_WHITESPACE)
    string(TOLOWER ${TMP_LSB_RELEASE_CODENAME} LSB_RELEASE_CODENAME)
    message(STATUS "LSB release codename: ${LSB_RELEASE_CODENAME}")
endif(LSB_RELEASE_COMMAND)

# If defined while running cmake look for mkl
# e.g. -DMKL_INSTALL_PATH=/home/ionadmin/intel/composer_xe_2013_sp1.0.080/mkl
if (DEFINED MKL_INSTALL_PATH)
  message("Setting mkl root to ${MKL_INSTALL_PATH}")
  include_directories(${MKL_INSTALL_PATH}/include)
  set(MKL_LINK_LIBS "-Wl,--start-group  ${MKL_INSTALL_PATH}/lib/intel64/libmkl_intel_lp64.a ${MKL_INSTALL_PATH}/lib/intel64/libmkl_core.a ${MKL_INSTALL_PATH}/lib/intel64/libmkl_sequential.a -Wl,--end-group")
else()
  message("Not setting mkl root ${MKL_INSTALL_PATH}")
endif()


option(ION_USE_MKL "Using Intel MKL" OFF)
mark_as_advanced(ION_USE_MKL)

option(ION_USE_SYSTEM_CUDA "Use CUDA system libraries" OFF)
mark_as_advanced(ION_USE_SYSTEM_CUDA)

option(ION_USE_CUDA "Compile CUDA code" ON)
mark_as_advanced(ION_USE_CUDA)

option(ION_USE_SYSTEM_SAMTOOLS "Use samtools system libraries" OFF)
mark_as_advanced(ION_USE_SYSTEM_SAMTOOLS)

option(ION_USE_SYSTEM_BAMTOOLS "Use bamtools system libraries" OFF)
mark_as_advanced(ION_USE_SYSTEM_BAMTOOLS)

option (ION_USE_SYSTEM_LIBSTATGEN "Use libstatgen system libraries" OFF)
mark_as_advanced(ION_USE_SYSTEM_LIBSTATGEN)


if (${LSB_RELEASE_CODENAME} STREQUAL "sid" OR # Debian Unstable
    ${LSB_RELEASE_CODENAME} STREQUAL "jessie" OR # Debian 8
    ${LSB_RELEASE_CODENAME} STREQUAL "stretch" OR # Debian 9
    ${LSB_RELEASE_CODENAME} STREQUAL "buster" OR # Debian 10
    ${LSB_RELEASE_CODENAME} STREQUAL "core" OR # CentOS 7
    ${LSB_RELEASE_CODENAME} STREQUAL "trusty" OR # Ubuntu 14.04
    ${LSB_RELEASE_CODENAME} STREQUAL "xenial" OR # Ubuntu 16.04
    ${LSB_RELEASE_CODENAME} STREQUAL "bionic" ) # Ubuntu 18.04
  option(ION_USE_SYSTEM_HDF5 "Use hdf5 system libraries" ON)
else()
  option(ION_USE_SYSTEM_HDF5 "Use hdf5 system libraries" OFF)
endif()
mark_as_advanced(ION_USE_SYSTEM_HDF5)

option(ION_USE_SYSTEM_EIGEN "Use EIGEN system libraries" OFF)
mark_as_advanced(ION_USE_SYSTEM_EIGEN)

option(ION_USE_SYSTEM_ARMADILLO "Use armadillo system libraries" OFF)
mark_as_advanced(ION_USE_SYSTEM_ARMADILLO)

option(ION_USE_SYSTEM_BOOST "Use boost system libraries" ON)
mark_as_advanced(ION_USE_SYSTEM_BOOST)

option(ION_USE_SYSTEM_PICARD "Use picard system libraries" OFF)
mark_as_advanced(ION_USE_SYSTEM_PICARD)

if (${LSB_RELEASE_CODENAME} STREQUAL "bionic")
  set(cuda_proj_version "10.0.130-24817639")
  set(cuda_toolkit_tar_file "cuda-linux64-18.04-rel-${cuda_proj_version}.tar.gz")
else()
  set(cuda_proj_version "8.0.44-21122537")
  set(cuda_toolkit_tar_file "cuda-linux64-16.04-rel-${cuda_proj_version}.tar.gz")
endif()

string(REGEX REPLACE "(.*)-[0-9]*" "\\1" CUDA_VERSION ${cuda_proj_version})
set(cuda_toolkit "cuda_toolkit")
set(cuda_toolkit_version "${cuda_toolkit}-${cuda_proj_version}")


if(ION_USE_CUDA)
    message(STATUS "BUILD with CUDA ${CUDA_VERSION}")
    add_definitions(-DION_COMPILE_CUDA)

    if (NOT ION_USE_SYSTEM_CUDA)

        ExternalProject_add(${cuda_toolkit}
            PREFIX ${PROJECT_BINARY_DIR}/../${cuda_toolkit_version}-prefix
            SOURCE_DIR ${PROJECT_BINARY_DIR}/../${cuda_toolkit_version}
            URL "http://${ION_UPDATE_SERVER}/updates/software/external/${cuda_toolkit_tar_file}"
#            URL_MD5 ""
            TIMEOUT "3600"
            CONFIGURE_COMMAND ""
            BUILD_COMMAND ""
            INSTALL_COMMAND ""
            #PATCH_COMMAND patch -p1 -t -N < "${PROJECT_SOURCE_DIR}/../external/${cuda_toolkit_patch_file}"
        )


        set(CUDA_TOOLKIT_ROOT_DIR "${PROJECT_BINARY_DIR}/../${cuda_toolkit_version}")
        set(CUDA_INCLUDE_DIRS "${PROJECT_BINARY_DIR}/../${cuda_toolkit_version}/include")
        set(CUDA_NVCC_EXECUTABLE "${PROJECT_BINARY_DIR}/../${cuda_toolkit_version}/bin/nvcc")
        set(CUDA_CUDART_LIBRARY "${PROJECT_BINARY_DIR}/../${cuda_toolkit_version}/lib64/libcudart_static.a")
        set(CUDA_TOOLKIT_INCLUDE "${PROJECT_BINARY_DIR}/../${cuda_toolkit_version}/include")
        set(CUDA_cublas_LIBRARY "${PROJECT_BINARY_DIR}/../${cuda_toolkit_version}/lib64/libcublas.so")
        set(CUDA_cufft_LIBRARY "${PROJECT_BINARY_DIR}/../${cuda_toolkit_version}/lib64/libcufft.so")
        set(CUDA_VERBOSE_BUILD OFF)
        set(CUDA_64_BIT_DEVICE_CODE ON)
        include(${CMAKE_ROOT}/Modules/FindCUDA.cmake)

    else()
        find_package(CUDA REQUIRED)
    endif()
    include_directories(${CUDA_INCLUDE_DIRS})
    message(STATUS "CUDA_LIBRARIES: ${CUDA_LIBRARIES}")
    message(STATUS "CUDA_INCLUDE_DIRS: ${CUDA_INCLUDE_DIRS}")
endif()

if(NOT ION_USE_SYSTEM_HDF5)
  set(proj_name "hdf5")
  set(proj_version "1.8.11")
  set(proj_name_version "${proj_name}-${proj_version}")
  ExternalProject_add(${proj_name}_proj
    URL "http://${ION_UPDATE_SERVER}/updates/software/external/hdf5-1.8.11.tar.gz"
#    URL_MD5 1196e668f5592bfb50d1de162eb16cff
    PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}
    BINARY_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}-build
    CONFIGURE_COMMAND ${PROJECT_BINARY_DIR}/../${proj_name_version}/configure CFLAGS=-std=c99
    --with-pic=yes --disable-shared --with-pthread --enable-threadsafe
    --prefix=${PROJECT_BINARY_DIR}/../${proj_name_version}-install
  )
  include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}-install/include")
  set(HDF5_LIBRARIES "${PROJECT_BINARY_DIR}/../${proj_name_version}-install/lib/libhdf5.a")
  set(HDF5_HL_LIBRARIES "${PROJECT_BINARY_DIR}/../${proj_name_version}-install/lib/libhdf5_hl.a")
  set(ION_HDF5_LIBS "${HDF5_HL_LIBRARIES};${HDF5_LIBRARIES}")
else()
  add_custom_target(hdf5_proj)
  set(HDF5_USE_STATIC_LIBRARIES OFF)
  find_package(HDF5 REQUIRED)
  if (${LSB_RELEASE_CODENAME} STREQUAL "trusty" OR
      ${LSB_RELEASE_CODENAME} STREQUAL "xenial" OR
      ${LSB_RELEASE_CODENAME} STREQUAL "bionic")
    set(ION_HDF5_LIBS "hdf5;hdf5_hl;${HDF5_LIBRARIES}")
  else()
    set(ION_HDF5_LIBS "${HDF5_HL_LIBRARIES};${HDF5_LIBRARIES}")
  endif()
  if (${LSB_RELEASE_CODENAME} STREQUAL "xenial" OR
      ${LSB_RELEASE_CODENAME} STREQUAL "bionic")
    link_directories("/usr/lib/x86_64-linux-gnu/hdf5/serial/")
  endif()
  message(STATUS "ION_HDF5_LIBS: ${ION_HDF5_LIBS}")
  include_directories("${HDF5_INCLUDE_DIRS}")
  message(STATUS "HDF5_INCLUDE_DIRS: ${HDF5_INCLUDE_DIRS}")
endif()


if(NOT ION_USE_SYSTEM_EIGEN)
  set(proj_name "eigen")
  set(proj_version "3.2.7")
  set(proj_name_version "${proj_name}-${proj_version}")
  ExternalProject_add(${proj_name}_proj
    #URL "https://bitbucket.org/eigen/eigen/get/3.2.4.tar.gz"
    URL "http://${ION_UPDATE_SERVER}/updates/software/external/eigen-3.2.7.tar.gz"
    #URL_MD5 9559c34af203dde5f3f1d976d859c5b3
    PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}
    BINARY_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}-build
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ""
    INSTALL_COMMAND ""
  )
  include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}")
else()
  include_directories("/usr/include/eigen3/")
endif()


if(NOT ION_USE_SYSTEM_ARMADILLO)
  set(proj_name "armadillo")
  set(proj_version "6.100.0+ion1")
  set(proj_name_version "${proj_name}-${proj_version}")
  set(ARMADILLO_PATCH "${PROJECT_SOURCE_DIR}/../external/armadillo-6.100.0+ion1.patch")
  ExternalProject_add(${proj_name}_proj
    URL "http://${ION_UPDATE_SERVER}/updates/software/external/armadillo-6.100.0.tar.gz"
    #URL_MD5 e8400bc7adb65fa0edc8c8ccb49b60eb
    PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}
    BINARY_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}-build
    CMAKE_ARGS
      -DBUILD_SHARED_LIBS:BOOL=FALSE
      -DARMA_USE_LAPACK:BOOL=TRUE
      -DARMA_USE_BLAS:BOOL=TRUE
      -DARMA_USE_ATLAS:BOOL=FALSE
      -DARMA_USE_WRAPPER:BOOL=FALSE
      -DARMA_USE_MKL:BOOL=${ION_USE_MKL}
      -DCMAKE_INSTALL_PREFIX:PATH=${PROJECT_BINARY_DIR}/../${proj_name_version}-install
    PATCH_COMMAND patch -p0 -t -N < "${ARMADILLO_PATCH}"
  )
  set(ION_ARMADILLO_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}-install/lib/libarmadillo.a")
  include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}-install/include")
else()
  set(ION_ARMADILLO_LIBS "armadillo")
endif()


if(NOT ION_USE_SYSTEM_BOOST)
  set(proj_name "boost")
  set(proj_version "1.59.0")
  set(proj_name_version "${proj_name}-${proj_version}")
  ExternalProject_add(${proj_name}_proj
    URL "http://sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz"
    PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}
    #BINARY_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}-build
    UPDATE_COMMAND ""
    CONFIGURE_COMMAND ./bootstrap.sh
    BUILD_IN_SOURCE 1
    BUILD_COMMAND     ./bjam install
    --build-dir=${PROJECT_BINARY_DIR}/../${proj_name_version}-build
    --prefix=${PROJECT_BINARY_DIR}/../${proj_name_version}-install
    --with-serialization
    INSTALL_COMMAND ""
    )
  include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}-install/include")
  set(ION_BOOST_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}-install/lib/libboost_serialization.a")
else()
  add_custom_target(boost_proj)

  set(Boost_USE_STATIC_LIBS ON)
#  set(Boost_USE_MULTITHREADED ON)
#  unset(Boost_INCLUDE_DIR CACHE)
#  unset(Boost_LIBRARY_DIRS CACHE)
  find_package(Boost REQUIRED COMPONENTS serialization )
  set(ION_BOOST_LIBS ${Boost_LIBRARIES})

#  find_package(Boost REQUIRED)
#  set(ION_BOOST_LIBS "boost_serialization.a")

  message(STATUS "ION_BOOST_LIBS: ${ION_BOOST_LIBS}")
  include_directories(${Boost_INCLUDE_DIRS})
endif()

# uncomment for profiling if gprofile installed
# add_library(PROFILE STATIC IMPORTED)
# set_property(TARGET PROFILE PROPERTY IMPORTED_LOCATION "/usr/local/lib/libprofiler.a")

include_directories("${PROJECT_BINARY_DIR}")
include_directories("${PROJECT_SOURCE_DIR}")
include_directories("${PROJECT_SOURCE_DIR}/../external/jsoncpp-src-amalgated0.6.0-rc1")


# wget https://github.com/samtools/htslib/archive/1.2.1.tar.gz
# md5sum : 81f5f1aa17a188a6b6250ca67d83384d
# tar xvzf 1.2.1.tar.gz
# tar cvzf htslib-1.2.1.tar.gz htslib-1.2.1
# md5sum : 028c9110bd80d40e13dbd8270ee7eb2b
if(NOT ION_USE_SYSTEM_HTSLIB)
  set(proj_name "htslib")
  set(proj_version "1.2.1+ion2")
  set(proj_name_version "${proj_name}-${proj_version}")
  ExternalProject_add(${proj_name}_proj
    URL "http://${ION_UPDATE_SERVER}/updates/software/external/htslib-1.2.1.tar.gz"
    #URL_MD5 028c9110bd80d40e13dbd8270ee7eb2b
    PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}
    #BINARY_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}-build
    BUILD_IN_SOURCE 1
    CONFIGURE_COMMAND ""
    BUILD_COMMAND make
    INSTALL_COMMAND ""
    PATCH_COMMAND patch -p1 -t -N < "${ION_TS_EXTERNAL}/htslib-1.2+ion2.patch"
  )
  set(ION_HTSLIB_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}/libhts.a")
  include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}")
else()
  set(ION_HTSLIB_LIBS "hts")
endif()


# wget https://github.com/samtools/samtools/archive/1.2.tar.gz
# md5sum 2748356ef392c0694ca1142de37cf2aa
# tar xvzf 1.2.tar.gz
# tar cvzf samtools-1.2.tar.gz samtools-1.2
# md5sum f94f6ea20f5d581459f90daa39020a60
if (NOT ION_USE_SYSTEM_SAMTOOLS)
  set(proj_name "samtools")
  set(proj_version "1.2+ion4")
  set(proj_name_version "${proj_name}-${proj_version}")
  ExternalProject_add(${proj_name}
    DEPENDS htslib_proj
    URL "http://${ION_UPDATE_SERVER}/updates/software/external/samtools-1.2.tar.gz"
    #URL_MD5 f94f6ea20f5d581459f90daa39020a60
    PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}
    BUILD_IN_SOURCE 1
    CONFIGURE_COMMAND ""
    BUILD_COMMAND make
    INSTALL_COMMAND ""
    PATCH_COMMAND patch -p1 -t -N < "${ION_TS_EXTERNAL}/samtools-1.2+ion4.patch"
  )
  include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}")
  set(ION_SAMTOOLS_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}/libbam.a")
  message(STATUS "SAMTOOLS_INCLUDE_DIRS: ${PROJECT_BINARY_DIR}/../${proj_name_version}")
else()
    set(ION_SAMTOOLS_LIBS libbam.a)
    include_directories("/usr/include/samtools")
    message(STATUS "SAMTOOLS_INCLUDE_DIRS: /usr/include/samtools")
endif()


if (NOT ION_USE_SYSTEM_PICARD)
  set(proj_name "picard")
  set(proj_version "1.130")
  set(proj_name_version "${proj_name}-${proj_version}")
  ExternalProject_add(${proj_name}
    URL "http://${ION_UPDATE_SERVER}/updates/software/external/picard-tools-1.130.tar.gz"
    #URL_MD5
    # in source build
    PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR "${PROJECT_BINARY_DIR}/../${proj_name_version}"
    #BINARY_DIR "${PROJECT_BINARY_DIR}/../${proj_name_version}-build"
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ""
    INSTALL_COMMAND ""
  )
endif()


if (NOT ION_USE_SYSTEM_BAMTOOLS)
    set(proj_name "bamtools")
    if (${LSB_RELEASE_CODENAME} STREQUAL "bionic")
        set(revision_tag 740562a67a3)#set date below accordingly
        set(proj_version "2.4.2.20190207+git${revision_tag}")
    else()
        set(revision_tag 15eadb925f)#set date below accordingly
        set(proj_version "2.4.0.20150702+git${revision_tag}")
    endif()

    set(proj_name_version "${proj_name}-${proj_version}")
    set(bamtools_patch_file "${proj_name_version}.patch")
    ExternalProject_add(${proj_name}
      URL "http://${ION_UPDATE_SERVER}/updates/software/external/${proj_name_version}.tar.gz"
      PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
      SOURCE_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}
      BINARY_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}-build
      CMAKE_ARGS
        -DCMAKE_INSTALL_PREFIX:PATH=${PROJECT_BINARY_DIR}/../${proj_name_version}-install
      PATCH_COMMAND patch -p0 -t -N < "${PROJECT_SOURCE_DIR}/../external/${bamtools_patch_file}"
    )
    include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}-install/include/bamtools")
    set(ION_BAMTOOLS_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}-install/lib/bamtools/libbamtools.a")
else()
    find_library(ION_BAMTOOLS_LIBS NAMES bamtools libbamtools)
    include_directories("/usr/include/bamtools")
    add_custom_target(bamtools)
endif()

if (NOT ION_USE_SYSTEM_LIBSTATGEN)
    set (proj_name "libStatGen")
    set (proj_version "1.0.14")
    set (proj_name_version "${proj_name}-${proj_version}")
    ExternalProject_add(${proj_name}
        URL "https://github.com/statgen/libStatGen/archive/v1.0.14.tar.gz"
        PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
        SOURCE_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}
        BUILD_IN_SOURCE 1
        CONFIGURE_COMMAND ""
        BUILD_COMMAND make USER_WARNINGS=-Wall
        INSTALL_COMMAND ""
        #PATCH_COMMAND patch -p1 -t -N < "${ION_TS_EXTERNAL}/libstatgen-1.0.14.patch"
    )
    set(ION_STATGEN_LIBS  "${PROJECT_BINARY_DIR}/../${proj_name_version}/libStatGen.a")
    set(ION_STATGEN_INCLUDES "${PROJECT_BINARY_DIR}/../${proj_name_version}/include")
else()
    find_library(ION_BAMTOOLS_LIBS NAMES libstatgen)
    include_directories("/usr/include/libstatgen")
    add_custom_target(libstatgen)
endif()
