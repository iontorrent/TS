---
# file: roles/common/tasks/main.yml

- name:
  include: '../../../globals.yml'

- name: update repo list
  include: '../../../repos.yml'


#-----------------------------------------------------------------------------
# On each compute node, replicate the headnode's /etc/hosts file
#-----------------------------------------------------------------------------
- name: Copy /etc/hosts to /tmp/hosts
  when: enable_hosts_copy
  copy: src=/etc/hosts dest=/tmp/hosts

- name: Edit /tmp/hosts - change loopback hostname
  when: enable_hosts_copy
  lineinfile:
    state: present
    dest: /tmp/hosts
    regexp: "^127.0.1.1.*"
    line: "127.0.1.1       {{ ansible_hostname }}"
    backup: yes

- name: Copy /tmp/hosts to /etc/hosts
  when: enable_hosts_copy
  command: /bin/cp /tmp/hosts /etc/hosts


#-----------------------------------------------------------------------------
# Install system packages common to all servers
#-----------------------------------------------------------------------------
- name: preseed tmpreaper package
  script: tmpreaper.preseed

- name: Set package preseed values
  script: "{{ ansible_env.PWD }}/files/grub-pc.preseed {{ GRUB_BOOT_DEVICE }}"
  when: GRUB_BOOT_DEVICE is defined and not docker_image

# install grub-pc, which uses ucf for configuration,
# so need to set 'force-confdef' to keep existing conf
# https://askubuntu.com/a/147079
- name: update grub-pc package but keeping configuration
  apt:
    name: grub-pc
    state: present
    force: yes
    dpkg_options: 'force-confold,force-confdef'
  when: has_network_access

- name: set grub related packages to hold to prevent non-interactive updates
  command: apt-mark hold {{ item }}
  with_items:
    - grub-pc
    - grub-pc-bin
    - grub-common
    - grub2-common
    - grub-gfxpayload-lists

- name: show the packages that have been held back
  command: apt-mark showhold
  register: apthold

- debug:
    var: apthold.stdout_lines

- name: Install system packages
  apt:
    name: "{{ item }}"
    state: present
    force: yes
  with_items: "{{ common_syspkg_list }}"
  when: has_network_access

#=============================================================================
# Install Perl modules
#=============================================================================
# these modules are used by plugins (installed on headnode and compute nodes)
# these packages have been available since 14.04
- name: Install Perl modules used by plugins
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - libmodule-package-perl
    - libjson-perl
    - libio-all-perl
    - liblist-moreutils-perl
    - libreadonly-perl
    - libstatistics-descriptive-perl
    - libstatistics-linefit-perl
  when: has_network_access

#-----------------------------------------------------------------------------
#    named_core_files
#-----------------------------------------------------------------------------
- name: Enable named core files
  sysctl:
    name: kernel.core_pattern
    reload: yes
    state: present
    value: 'core.%e.%p.%h.%t'
  when: not docker_image

#-----------------------------------------------------------------------------
# disable IPv6 (See JIRA TS-12538) or
# https://brunomgalmeida.wordpress.com/tag/comm-postgres-tainted-g/
#-----------------------------------------------------------------------------
- name: Disable IPv6
  sysctl:
    name: net.ipv6.conf.all.disable_ipv6
    reload: yes
    state: present
    value: '1'

#-----------------------------------------------------------------------------
# Ensure grub does not hang at the grub menu on reboot after an error
#-----------------------------------------------------------------------------
- name: check for "{{ grub_config_file }}"
  stat:
    path: "{{ grub_config_file }}"
  register: grub_conf

- name: Make grub rebootable after shutdown
  lineinfile:
    dest: "{{ grub_config_file }}"
    insertafter: EOF
    line: 'GRUB_RECORDFAIL_TIMEOUT=$GRUB_TIMEOUT'
    regexp: 'GRUB_RECORDFAIL_TIMEOUT.*'
  notify: "update grub"
  when: grub_conf.stat.exists
  register: grub_update_needed

#-----------------------------------------------------------------------------
# TS-13492
#-----------------------------------------------------------------------------
- name: solves the falsely reported DBE from GPU driver
  lineinfile:
    dest: "{{ grub_config_file }}"
    line: 'GRUB_TERMINAL=console'
    regexp: '.*GRUB_TERMINAL=console'
  when: ansible_product_name == "Precision WorkStation T7500" and grub_conf.stat.exists
  notify: "update grub"
  register: grub_update_needed

#-----------------------------------------------------------------------------
# TS-18116 and FST-14720
#-----------------------------------------------------------------------------
- name: Change i/o scheduler to improve performance on 550 for 18.04 Servers
  lineinfile:
    dest: "{{ grub_config_file }}"
    line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet splash elevator=deadline"'
    regexp: 'GRUB_CMDLINE_LINUX_DEFAULT.*'
  when: S5_virtual_guest|bool == False and ansible_distribution_version == "18.04"
  notify: "update initramfs"
  register: initramfs_update_needed

- name: Change i/o scheduler to improve performance on 550 for S5 TSVM
  lineinfile:
    dest: "{{ grub_config_file }}"
    line: 'GRUB_CMDLINE_LINUX="console=tty0 console=ttyS0,115200n8 net.ifnames=0 biosdevname=0 elevator=deadline"'
    regexp: 'GRUB_CMDLINE_LINUX.*'
  when: S5_virtual_guest|bool == True and ansible_distribution_version == "18.04"
  notify: "update initramfs"
  register: initramfs_update_needed

#-----------------------------------------------------------------------------
# initialize_system_users
#-----------------------------------------------------------------------------

# NOTE: ionian user required prior to initial installation of ion-dbreports
# Initialize ionian group and user
- name: Add group ionian
  group:
    name: ionian
    gid: 1100
    state: present
    system: yes

# NOTE: non_unique was added as result of TS-11113
- name: Initialize ionian user
  user:
    name: ionian
    uid: 1100
    state: present
    system: yes
    group: ionian
    non_unique: yes

# Initialize ionadmin
# This shell method is because of having to use this password creation method
- shell: bash -lc '/usr/bin/getent passwd | grep -q "^ionadmin:"'
  register: result
  ignore_errors: yes

- name: Initialize ionadmin user
  when: result|failed
  shell: /usr/sbin/useradd -m -s /bin/bash -p $(perl -e "print crypt(ionadmin, 'password')" $password) ionadmin;

- name: Add ionadmin to ionian www-data groups
  user:
    name: ionadmin
    append: yes
    groups: ionian,www-data

# Add www-data user to the ionian group
- name: Add www-data user to the ionian group
  user:
    name: www-data
    append: yes
    groups: ionian

#-----------------------------------------------------------------------------
#    set_logfile_size_limit
#-----------------------------------------------------------------------------
- name: Set logfile size limit
  lineinfile:
    dest: /etc/logrotate.conf
    state: present
    regexp: '# Torrent Server maximum log file limit'
    line: '# Torrent Server maximum log file limit'
    insertbefore: BOF
    mode: 0644

- name: Set logfile size limit
  lineinfile:
    dest: /etc/logrotate.conf
    state: present
    regexp: '^size.*'
    line: 'size 100M'
    insertafter: '# Torrent Server maximum log file limit'
    mode: 0644

#-----------------------------------------------------------------------------
# Remove motd regarding available OS upgrade
#-----------------------------------------------------------------------------
- name: Remove message regarding available OS upgrade
  file:
    dest: /etc/update-motd.d/{{ item }}
    state: absent
  with_items:
    - 10-help-text
    - 50-motd-news
    - 80-esm
    - 80-livepatch
    - 91-release-upgrade
  ignore_errors: yes

#-----------------------------------------------------------------------------
# Disable checking for updates; do not want TS customers to do this.
#-----------------------------------------------------------------------------
- name: disable checking for updates
  lineinfile:
    dest: /etc/update-manager/release-upgrades
    state: present
    regexp: '^[Pp]rompt=.*'
    line: 'prompt=never'
  ignore_errors: yes

#-----------------------------------------------------------------------------
# Configure tmpreaper package to purge old files from /tmp directory
#-----------------------------------------------------------------------------
- name: tmpreaper disable showing warning
  lineinfile:
    dest: /etc/tmpreaper.conf
    state: present
    regexp: '.*SHOWWARNING.*'
    line: '#SHOWWARNING=true'

- name: tmpreaper purge every 7 days
  lineinfile:
    dest: /etc/tmpreaper.conf
    state: present
    regexp: '^.*TMPREAPER_TIME=.*'
    line: 'TMPREAPER_TIME=7d'

#-----------------------------------------------------------------------------
# Configure maximum number of open file descriptors allowed
#-----------------------------------------------------------------------------
- name: Set soft limit
  lineinfile:
    dest: "{{ security_limits_file }}"
    state: present
    regexp: '.*\*.*soft.*nofile.*$'
    line: "*                soft    nofile          {{ MAX_FILES_OPEN }}"
    insertbefore: '# End of file'

- name: Set hard limit
  lineinfile:
    dest: "{{ security_limits_file }}"
    state: present
    regexp: '.*\*.*hard.*nofile.*$'
    line: '*                hard    nofile          {{ MAX_FILES_OPEN }}'
    insertbefore: '# End of file'

- name: Set soft limit
  lineinfile:
    dest: "{{ security_limits_file }}"
    state: present
    regexp: '.*root.*soft.*nofile.*$'
    line: 'root             soft    nofile          {{ MAX_FILES_OPEN }}'
    insertbefore: '# End of file'

- name: Set hard limit
  lineinfile:
    dest: "{{ security_limits_file }}"
    state: present
    regexp: '.*root.*hard.*nofile.*$'
    line: 'root             hard    nofile          {{ MAX_FILES_OPEN }}'
    insertbefore: '# End of file'

#-----------------------------------------------------------------------------
# grub update based on changes in grub config
#-----------------------------------------------------------------------------
# For unknown reasons, "update grub" handlers are always skipped
- name: Run update-grub if needed
  command: /usr/sbin/update-grub
  when: grub_update_needed.changed

- name: Run update-initramfs and grub if needed
  command: "{{ item }}"
  with_items:
    - /usr/sbin/update-grub
    - /usr/sbin/update-initramfs -u
  when: initramfs_update_needed.changed
