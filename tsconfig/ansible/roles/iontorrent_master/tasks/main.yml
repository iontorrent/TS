---
# file: roles/iontorrent_master/tasks/main.yml

- name:
  include: '../../../globals.yml'

#-----------------------------------------------------------------------------
# Install system packages for a master node
#-----------------------------------------------------------------------------
- name: preseed postfix package
  script: postfix.preseed {{ ansible_fqdn }}

- name: preseed rabbitmq package
  script: rabbitmq.preseed

- name: preseed samba package
  script: samba.preseed

- name: Install system packages for master node
  apt: name={{ item }} state=present force=yes
  with_items: "{{ ionmaster_syspkg_list }}"
  when: has_network_access

- name: Install pdftk, skip if not available
  apt: name=pdftk state=present
  when: has_network_access
  ignore_errors: yes

#-----------------------------------------------------------------------------
# mod-gnutls conflicts and so we install the package, b/c it is a dependency and
# then disable gnutls. Else, apache2 fails to restart and we bomb-out
#-----------------------------------------------------------------------------
- name: Install libapache2-mod-gnutls
  apt: name=libapache2-mod-gnutls state=present
  when: has_network_access

- name: Disable conflicting apache modules - gnutls
  shell: /usr/sbin/a2dismod gnutls
  ignore_errors: yes

# This file is required prior to installing ion-rsmts (others?)
- name: Tag the headnode with the masternode indicator file
  file: path=/opt/ion/.masternode owner=root group=root mode=0644 state=touch


#-----------------------------------------------------------------------------
# Install Ion Torrent Packages for a master node
#-----------------------------------------------------------------------------
- name: Install packages for head node
  apt: name={{ item }} state=present force=yes
  with_items: "{{ ionmaster_ionpkg_list }}"
  when:
    - item != ''
    - has_network_access

- name: Install 3rd party plugin packages
  apt: name={{ item }} state=present force=yes
  with_items: "{{ ionmaster_pluginpkg_list }}"
  when:
    - item != ''
    - has_network_access
  ignore_errors: yes

# Install or remove OEM packages
- name: Install OEM packages if "is_oem" is {{ is_oem }}
  apt:
    name: "{{ item }}"
    state: present
    force: yes
  with_items: "{{ ionmaster_oempkg_list }}"
  when:
    - item != ''
    - is_oem
    - has_network_access

- name: Remove OME packages if "is_oem" is {{ is_oem }}
  apt:
    name: "{{ item }}"
    state: absent
    force: yes
  with_items: "{{ ionmaster_oempkg_list }}"
  when:
    - item != ''
    - not is_oem
    - has_network_access


# Restarting apache2 cleanly prior to update
- name: Stopping apache2
  service:
    name: apache2
    state: stopped
  ignore_errors: yes

- name: Force kill apache2 if necessary
  command: pkill -9 apache2
  ignore_errors: yes

- name: Starting apache2
  service:
    name: apache2
    state: started


# Ensure Ion system daemons are running
- name: Ion Daemons
  service: name={{ item }} state=restarted enabled=yes
  with_items: "{{ ion_services_list }}"

#-----------------------------------------------------------------------------
# Site Specific Database Changes
#-----------------------------------------------------------------------------
# Add compute node hostnames to the Crunchers table
- name: python script to add compute node to Cruncher Table
  when: "item != ansible_hostname"
  script: 'add_cruncher.py {{ item }}'
  with_items:
    - "{{ groups.computes }}"

# Modify the default Rig parameters record in the Rigs table
- name: Modify the default Rig if this is S5VM
  when: S5_virtual_guest
  script: 's5_rig_default.py'
  ignore_errors: no

#-----------------------------------------------------------------------------
# Create/update the tsconf.log file
#-----------------------------------------------------------------------------
- name: Get version of ion-tsconfig
  shell: dpkg -l ion-tsconfig | tail -1 | awk '{print $3}'
  register: tsconfig_version

- name: Assures /etc/torrentserver dir exists
  file: path=/etc/torrentserver state=directory mode=0755 owner=root group=root

- name: Create/Update tsconf.log
  template: src={{ ansible_env.PWD }}/templates/tsconf.conf.j2 dest=/etc/torrentserver/tsconf.conf mode=0644 owner=root group=root

#-----------------------------------------------------------------------------
# Increase minimum free space on S5
#-----------------------------------------------------------------------------
- name: Increase minimum free memory
  sysctl: name=vm.min_free_kbytes value=524288 reload=yes
  when: S5_virtual_guest|bool == True

#-----------------------------------------------------------------------------
# Enable console access to the TSVM running on S5 host
#-----------------------------------------------------------------------------
- name: Adding ttyS0 config to enable console on the S5TSVM
  template: src={{ ansible_env.PWD }}/templates/ttyS0.conf.j2 dest=/etc/init/ttyS0.conf mode=0644 owner=root group=root
  when: S5_virtual_guest|bool == True

#-----------------------------------------------------------------------------
# Enable a console for S5 only
#  added fixes for TS-18116/TS-18164 and FST-14720
#-----------------------------------------------------------------------------
- name: GRUB console enabled (14.04)
  lineinfile:
    dest: "{{ grub_config_file }}"
    line: 'GRUB_CMDLINE_LINUX="console=tty0 console=ttyS0,115200n8"'
    regexp: 'GRUB_CMDLINE_LINUX.*'
  when: S5_virtual_guest|bool == True and ansible_distribution_version == "14.04"
  notify: update grub

- name: GRUB console enabled (18.04)
  lineinfile:
    dest: "{{ grub_config_file }}"
    line: 'GRUB_CMDLINE_LINUX="console=tty0 console=ttyS0,115200n8 net.ifnames=0 biosdevname=0 elevator=deadline"'
    regexp: 'GRUB_CMDLINE_LINUX.*'
  when: S5_virtual_guest|bool == True and ansible_distribution_version == "18.04"
  notify: update grub
#-----------------------------------------------------------------------------
# Default tmpreaper will purge /tmp directory.  Headnode should also purge
# /results/referenceLibrary/temp
#-----------------------------------------------------------------------------
- name: "directories to purge: /tmp /results/referenceLibrary/temp"
  lineinfile: dest=/etc/tmpreaper.conf state=present
                regexp='^.*TMPREAPER_DIRS=.*'
                line=TMPREAPER_DIRS="'/tmp/. /results/referenceLibrary/temp/.'"

#-----------------------------------------------------------------------------
# Initialize no_proxy in /etc/environment file, if its missing
#-----------------------------------------------------------------------------
- name: Set no_proxy in /etc/environment
  lineinfile: dest=/etc/environment line=no_proxy="localhost,127.0.0.1,127.0.1.1,::1"
                insertafter=EOF
- name: Set NO_PROXY in /etc/environment
  lineinfile: dest=/etc/environment line=NO_PROXY="localhost,127.0.0.1,127.0.1.1,::1"
                insertafter=EOF

#-----------------------------------------------------------------------------
# Enable a custom shell prompt for S5 only
#-----------------------------------------------------------------------------
- name: Enable customized shell prompt
  lineinfile: dest=/home/ionadmin/.bashrc
                insertafter=EOF
                line="ihid=$(nmblookup -A 192.168.122.1|awk '/<00>/{print $1;exit;}')"
  when: S5_virtual_guest|bool == True
- name:
  lineinfile: dest=/home/ionadmin/.bashrc
                insertafter="^ihid=.*"
                line="PS1='${debian_chroot:+($debian_chroot)}\u@\h-${ihid}:\w\$ '"
  when: S5_virtual_guest|bool == True

#-----------------------------------------------------------------------------
# write out list of ion services to monitor and restart
#-----------------------------------------------------------------------------
- stat:
    path: /etc/torrentserver/telemetry-services
  register: telemetry_file

- name: initialize telemetry-services if not found
  template:
    src: telemetry-services.j2
    dest: /etc/torrentserver/telemetry-services
    mode: 0644
    owner: www-data
    group: www-data
  when:
    - telemetry_file.stat.exists|bool == False

- name: load telemetry-services
  include_vars: /etc/torrentserver/telemetry-services

# disable telemetry services if users choose to disable
- name: disabling telemetry services on boot if configured
  service:
    name: "{{ item }}"
    enabled: no
  with_items: "{{ telemetric_services }}"
  when: enable_telemetry|bool == False

- name: write out ion-services
  template:
    src: services.j2
    dest: /etc/torrentserver/ion-services
    mode: 0644
    owner: www-data
    group: www-data


#-----------------------------------------------------------------------------
# Set up cron job to check system services
#-----------------------------------------------------------------------------
- cron:
    name: monitor services
    minute: "*/30"
    job: "/usr/bin/python /opt/ion/iondb/bin/check_system_services.py -n > /dev/null"


#-----------------------------------------------------------------------------
# Rescan for new and updated plugins
#-----------------------------------------------------------------------------

- name: Starting celery tasks to rescan for new plugins
  command: /usr/bin/python /opt/ion/iondb/bin/rescan_plugins.py

# support USB automount
- name: create systemd-udevd.service.d on 18.04
  file:
    path: /etc/systemd/system/systemd-udevd.service.d
    state: directory
    mode: '0755'
    owner: root
    group: root
  when: ansible_distribution_version == "18.04"

- name: add USB automount configuration on 18.04
  copy:
    src: usboverride.conf
    dest: /etc/systemd/system/systemd-udevd.service.d/
    mode: '0755'
    owner: root
    group: root
  when: ansible_distribution_version == "18.04"
  notify:
    - reload systemd daemon
    - restart systemd-udevd
