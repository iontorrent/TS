#!/bin/bash
# Copyright (C) 2011-2016 Ion Torrent Systems, Inc. All Rights Reserved
#
# Purpose: Configure an ubuntu (currently 14.04 trusty distribution) server for
# use as a Torrent Server.
#
set -e

#---                                    ---#
#--- Include function definition file	---#
#---                                    ---#
TSCONFIG_SRC_DIR='/usr/share/ion-tsconfig'
source ${TSCONFIG_SRC_DIR}/ts_params||source ../ts_params||true
source ${TSCONFIG_SRC_DIR}/ts_functions|| source ../ts_functions||true
LOCK_FILE=/var/lock/tsconfiglock

#--------------------------------------
# trap exit codes
#--------------------------------------
trap 'error ${LINENO}' ERR

#---                            ---#
#---    Variable Declarations   ---#
#---                            ---#
EXECUTE=0
OPTARGS="$@"
CONF_HEAD_NODE=0        # Enables SGE qmaster,postgres,apache2,/results sharing
UPDATE_SOFTWARE=0       # Get software updates and install
SWITCH_SOFTWARE=0
UPDATE_HOSTNAME=0       # Change the hostname (requires reboot)
CONF_TIME_ZONE=0        # Run timezone configuration script
CONF_POSTFIX=0          # Run postfix configuration script
INITIAL_CONFIG=1        # Flags interactive configuration settings - only for initial configuration
CHANGE_PASSWORD=0       # Change ionadmin password.
PURGE_ALL_DEB=0         # Delete all deb package files in apt cache
SECURITY_UPDATE=0       # Run apt-get unattended-upgrade
FORCE=False             # Some cases, ignore disk space requirement
NONINTERACTIVE=False    # Set to true to disable any user interaction operations
CONFIG_NO_NETWORK=0     # flag to allow non-network environment server configuration
version=5.2


#-------------------------------------------------------------------------------
# Check for valid distribution
# Only Ubuntu 14.04 allowed at this time
#-------------------------------------------------------------------------------
if test ${EXECUTE}; then
    LSB_RELEASE=$(lsb_release -r -s)
    if [ $LSB_RELEASE != '14.04' ] && [ $LSB_RELEASE != '18.04' ]; then
        echo "This release not supported"
        exit 0
    fi
fi

#---                                    ---#
#---    Command Line Options Parsing    ---#
#---                                    ---#

#---    First, if no args given, print help ---#
if [ $# == 0 ]; then
    print_help_1404
    exit 0
fi

#--------------------------------------
# Must be root
#--------------------------------------
needs_root

#---    We convert all arguments to lower case  ---#
while [ $# != 0 ]; do
    case ${1,,} in
        '-g')
            EXECUTE=1
        ;;
        '-d'|'--debug')
            set -x
        ;;
        '-f'|'--force')
            FORCE=true
        ;;
        '--reconfigure')
            if [ $EXECUTE == 1 ];then user_msg "Configure Torrent Server in no network environment"; fi
            CONF_HEAD_NODE=1
            CONFIG_NO_NETWORK=1
        ;;
        '--configure-server')
            if [ $EXECUTE == 1 ];then user_msg "Configure Torrent Server"; fi
            CONF_HEAD_NODE=1
        ;;
        '--update-torrent-suite'|'-s')
            if [ $EXECUTE == 1 ];then user_msg "Check for and install Ion Software updates"; fi
            UPDATE_SOFTWARE=1
        ;;
        '--switch-repo'|'-w')
            if [ $ENABLE_DEPRECATION == "True" ]; then
              if [ $EXECUTE == 1 ];then user_msg "Check for switching Repo and install Ion Software updates"; fi
              SWITCH_SOFTWARE=1
              confirm_switch_repo
            else
              echo "Repo switching is not allowed currently..."
              exit 1
            fi
        ;;
        '--security-update')
            if [ $EXECUTE == 1 ];then user_msg "Check for and install packages with security updates"; fi
            SECURITY_UPDATE=1
        ;;
        '--change-hostname'|'-r')
            if [ $EXECUTE == 1 ];then user_msg "Change server hostname"; fi
            UPDATE_HOSTNAME=1
            # If additional arg is provided, assume its the hostname
            if [ {$2,,} ]; then
                input=${2,,}
                shift
                #newHostName, newDomainName, newFQDN
                newHostName=${input%%.*}
                if echo ${input}|grep  -q "\."; then
                    newDomainName=${input#*.}
                else
                    newDomainName=""
                fi
                newFQDN=${input}
            fi
        ;;
        '--configure-timezone'|'-z')
            if [ $EXECUTE == 1 ];then user_msg "Configure time zone settings"; fi
            CONF_TIME_ZONE=1
        ;;
        '--configure-postfix'|'-p')
            if [ $EXECUTE == 1 ];then user_msg "Configure postfix mail settings"; fi
            CONF_POSTFIX=1
        ;;
        '--purge-all-deb')
            PURGE_ALL_DEB=1
        ;;
        '--noninteractive')
            NONINTERACTIVE=True
        ;;
        '--help'|'-h'|\?)
            print_help_1404
            exit 0
        ;;
        '--version'|'-v')
            if [ -f /opt/ion/bin/ion-tsconfig.version.env ]; then
                source /opt/ion/bin/ion-tsconfig.version.env
                IonVersionGetFullVersion ion-tsconfig
            else
                user_msg "`basename $0` version $version"
            fi
	    exit 0
        ;;
        *)
        echo "Unknown option: $1.  Exiting"
        echo "Use TSconfig --help for options."
        exit 1
        ;;
    esac
    shift
done

#---                                                                        ---#
#---    Exit and call script again this time logging all stdout and stderr  ---#
#---                                                                        ---#
if [ $EXECUTE -eq 0 ]; then
    rotate_log
    exec 3>&2   # fd 3 opened and directed to stderr; 'stores' original stderr fd
    exec 2>$TSCONFIG_LOG_DIR/$TSCONFIG_DEBUG_LOG    # Redirect stderr to a file
    chmod 666 $TSCONFIG_LOG_DIR/$TSCONFIG_DEBUG_LOG
    echo $(date) > $TSCONFIG_LOG_DIR/$TSCONFIG_INSTALL_LOG
    chmod 666 $TSCONFIG_LOG_DIR/$TSCONFIG_INSTALL_LOG
    $0 -g $OPTARGS | tee -a $TSCONFIG_LOG_DIR/$TSCONFIG_INSTALL_LOG
    exit ${PIPESTATUS[0]}
fi
##----------------------------------------------------------------------------
## Start logging all stdout/stderr
##----------------------------------------------------------------------------
#exec > >(tee "$TSCONFIG_LOG_DIR/$TSCONFIG_INSTALL_LOG") 2>&1
#

if [ -z ${TS_SWITCH_REPO_ACCEPTED} ]; then
    check_switch_repo
    export TS_SWITCH_REPO_ACCEPTED=1
fi

#---                    ---#
#---    Main Execution  ---#
#---                    ---#
#-----------------------------------------
# Need to acquire the lock file to proceed
#-----------------------------------------
if mkdir $LOCK_FILE; then
  trap 'rm -rf "$LOCK_FILE"' 0
  PID_LOCKED=1
  echo "Locking succeeded" 1>&2
else
  echo "Lock failed - is previous instance of TSconfig running?"
  exit 1
fi

if [ -f /opt/ion/bin/ion-tsconfig.version.env ]; then
    source /opt/ion/bin/ion-tsconfig.version.env
fi
log "version "`IonVersionGetMajor`"."`IonVersionGetMinor`"."`IonVersionGetRelease`" ("`IonVersionGetGitHash`")"


#---
#---    Installed software packages are upgraded
#---    N.B. This function MUST precede the configure/reconfigure function!
#---
if [ $UPDATE_SOFTWARE == 1 ]; then

    log "Software Package Update"

    # here we need to accept the eula
    if [ -z ${TS_EULA_ACCEPTED} ]; then
        accept_eula
        export TS_EULA_ACCEPTED=1
    fi


    # Root partition space check
    free_root=$(df -k|awk '/.*\/$/ {print $4}')
    log "root partition free space:$free_root kb"
    free_threshold=1048576
    if [[ $free_root -lt $free_threshold ]]; then
        if [ $FORCE = False ]; then
            log "Not enough disk space to update software (/ has $free_root kb free)"
            user_msg "=================================================================="
            user_msg "Not enough disk space to update software"
            user_msg "/ partition has $free_root kb free and needs $free_threshold kb"
            user_msg "Ion Software update has been cancelled."
            user_msg ""
            user_msg "To override this limit, add the '--force' argument"
            user_msg "=================================================================="
            exit 1
        else
            log "Warning: Not enough disk space to install software (/ has $free_root kb free)"
            log "User provided --force to override disk space warning"
        fi
    fi

    # Install prerequisites
    install_prerequisites

    enable_maintenance_mode
    log "Update software"
    cd $ANSIBLE_HOME
    ansible-playbook software_update.yml \
        -i ${ANSIBLE_HOME}/${MY_HOSTS} \
        --become

    if [ $? == 0 ]; then
        echo "=================================================================="
        echo "Software Update Complete"
        echo "=================================================================="
    else
        echo "=================================================================="
        echo "There was an error.  Sorry.  Check the log files."
        echo "=================================================================="
    fi
    disable_maintenance_mode
fi

#---
#---    Reconfigure is the same as configure.  All the places where packages are installed are only
#---    going to check if the package is installed, and not update if there is one available.
#---
if [ $CONF_HEAD_NODE == 1 ]; then

    #if ! network_tests $ETH_DEV; then
    #    log "Cannot configure node: Failed network test"
    #    exit 1
    #fi
    # Root partition space check
    echo "=================================================================="
    echo "Checking available disk space on the root partition"
    echo "=================================================================="
    free_root=$(df -k|awk '/.*\/$/ {print $4}')
    log "root partition free space:$free_root kb"
    free_threshold=10485760
    if [[ $free_root -lt $free_threshold ]]; then
        if [ $FORCE = False ]; then
            log "Error: Not enough disk space to install software (/ has $free_root kb free)"
            user_msg "=================================================================="
            user_msg "Not enough disk space to install software"
            user_msg "/ partition has $free_root kb free and needs $free_threshold kb"
            user_msg "Ion Software install has been cancelled."
            user_msg ""
            user_msg "To override this limit, add the '--force' argument"
            user_msg "=================================================================="
            exit 1
        else
            log "Warning: Not enough disk space to install software (/ has $free_root kb free)"
            log "User provided --force to override disk space warning"
        fi
    fi

    # Install prerequisites
    if [ $CONFIG_NO_NETWORK == 0 ]; then
        install_prerequisites
    fi

    #============================================================================================
    # Compute Node Handling
    #============================================================================================
    fubar=$(awk '/\[computes\]/,/\[webserver:children\]/' ${ANSIBLE_HOME}/${MY_HOSTS} | grep -v '\[')
    if [ ! -z "$fubar" ]; then
        configure_computes=true
    else
        configure_computes=false
    fi

    if $configure_computes; then

        echo "=================================================================="
        echo "Preparing compute nodes for configuration"
        echo "=================================================================="
        # Make sure we have an ssh key to give to the compute nodes - Run as ionadmin user, not root
        sudo -u $TSCONFIG_CLUSTER_ADMIN mkdir --mode=0700 -p /home/$TSCONFIG_CLUSTER_ADMIN/.ssh
        ANSIBLE_RSA_KEY=/home/$TSCONFIG_CLUSTER_ADMIN/.ssh/ansible_rsa_key
        if [[ ! -e ${ANSIBLE_RSA_KEY} ]]; then
            log "Generate ssh key"
            sudo -u $TSCONFIG_CLUSTER_ADMIN ssh-keygen -q -f ${ANSIBLE_RSA_KEY} -t rsa -N ''
        fi
        # Test for connectivity.  We expect to only copy secure keys on initial configuration, done from CLI.
        # This is a potential problem for a GUI software update in which the connectivity fails.  Will bork the install.
        if [ ! ansible computes -i ${ANSIBLE_HOME}/${MY_HOSTS} -m setup > /dev/null ]; then
            if [ $NONINTERACTIVE = False ]; then
                # This prompts for a password every time.
                echo -e "\nEnter compute node password..."
                ansible computes -i ${ANSIBLE_HOME}/${MY_HOSTS} -m authorized_key -a "user=$TSCONFIG_CLUSTER_ADMIN key='{{ lookup('file', '${ANSIBLE_RSA_KEY}.pub') }}' path=/home/$TSCONFIG_CLUSTER_ADMIN/.ssh/authorized_keys manage_dir=no" --ask-pass -c paramiko 1>&2
            fi
        fi

    fi

    export ANSIBLE_HOST_KEY_CHECKING=False
    # Rotate the ansible log file (Also specified in /etc/ansible/ansible.cfg)
    rotate /var/log/ion/ansible.log

    enable_maintenance_mode
    log "Configure Head Node"
    echo "=================================================================="
    echo "Starting the site configuration"
    if [ $CONFIG_NO_NETWORK == 1 ]; then
      echo "  ... allowing in non-network environment"
      echo "  ... WARNING: this will not install the missing required package"
    fi
    echo "=================================================================="
    cd $ANSIBLE_HOME
    TSCONFIG_NO_NETWORK=$CONFIG_NO_NETWORK ansible-playbook site.yml \
        -i ${ANSIBLE_HOME}/${MY_HOSTS} \
        --become

    echo "=================================================================="
    echo "TSconfig configure process completed successfully"
    echo "=================================================================="


    echo "=================================================================="
    echo "Restarting all system services after configuration"
    echo "=================================================================="
    eval "$CHECK_SYSTEM_SERVICES_PY --start"

    disable_maintenance_mode
    exit 0
fi

#---
#---    N.B. When a hostname change is specified, all other options are ignored
#---
if [ $UPDATE_HOSTNAME == 1 ]; then
    2>&-
    oldFQDN=$(hostname)
    ## User prompts to get new hostname and domain
    # Defines three variables: newHostName, newDomainName, newFQDN
    if [ -z $newFQDN ]; then
        get_input_hostname
    else
        echo "===================================================================="
        echo "CLI provided variables"
        echo newHostName = $newHostName
        echo newDomainName = $newDomainName
        echo newFQDN = $newFQDN
        echo "===================================================================="
    fi

    # Remove all queues
    for queue in $(qconf -sql); do qconf -dq $queue; done

    # Stop gridengine daemons
    service gridengine-exec stop
    service gridengine-master stop

    # Set new name (so Ansible will pick it up as {{ansible_hostname}} and {{ansible_fqdn}})
    /bin/hostname ${newHostName}
    echo "${newHostName}" > /etc/hostname
    echo "${newHostName}" > /etc/mailname
    sed -i "s/^127\.0\.1\.1.*/127.0.1.1 ${newFQDN} ${newHostName}/" /etc/hosts
    if [ -f /etc/postfix/main.cf ]; then
        sed -i "s/${oldFQDN}/${newFQDN}/g" /etc/postfix/main.cf
    fi

    hostfiles=$(find /usr/share/ion-tsconfig/ansible -name torrentsuite_hosts\*)
    for hostfile in ${hostfiles[@]}; do
        sed -i -e "/^\[headnode\]/ { n ; s/^.*/${newHostName} ansible_connection=local/ }" $hostfile
    done

    log "Changing hostname"
    cd $ANSIBLE_HOME
    ansible-playbook rename_headnode.yml \
        -i ${ANSIBLE_HOME}/${MY_HOSTS} \
        --become
    if [[ "$oldFQDN" != "$newHostName" ]]; then
        (
        set +e
        qconf -de $oldFQDN
        qconf -ds $oldFQDN
        qconf -dh $oldFQDN
        )
    fi

    #DIAGNOSTICS
    if false; then
        echo "===================================================================="
        cat /var/lib/gridengine/iontorrent/common/act_qmaster
        cat /var/lib/gridengine/iontorrent/common/host_aliases
        cat /etc/hosts
        cat /etc/hostname
        cat /etc/mailname
        grep "\[headnode\]" -A1 /usr/share/ion-tsconfig/ansible/torrentsuite_hosts*
        cat /etc/postfix/main.cf
        echo "===================================================================="
    fi

fi

#---
#--- Install debian package security updates only
#---
if [ $SECURITY_UPDATE == 1 ]; then
    log "Installing security updates"

    #Processes should be stopped, update completed, restart processes
    ion_daemon_ctrl stop
    cd $ANSIBLE_HOME
    ansible-playbook security_update.yml \
        -i ${ANSIBLE_HOME}/${MY_HOSTS} \
        --become
    ion_daemon_ctrl restart
fi

#---
#---    Execute the timezone configuration script
#---
if [ $CONF_TIME_ZONE == 1 ]; then
    # First prompt user for interactive timezone setting
    dpkg-reconfigure tzdata
    # Next, propagate the headnode's settings to the computes
    cd $ANSIBLE_HOME
    ansible-playbook -i ${ANSIBLE_HOME}/${MY_HOSTS} timezone.yml --become
fi

#---
#---    Execute the postfix configuration script
#---
if [ $CONF_POSTFIX == 1 ]; then
    dpkg-reconfigure postfix
fi
#---
#---    Execute the deb package purge command
#---
if [ $PURGE_ALL_DEB == 1 ]; then
    log "Deleting all deb package files"
    apt-get clean
fi

if [ $CHANGE_PASSWORD == 1 ]; then
    exec 2>&3   # Redirect stderr (which points to a file) back to stderr (console)
    config_password
fi
exit 0
