#!/bin/bash
# Copyright (C) 2010 Ion Torrent Systems, Inc. All Rights Reserved
#---    ---#
function print_help()
{
    if [ -f /opt/ion/bin/ion-tsconfig.version.env ]; then
        source /opt/ion/bin/ion-tsconfig.version.env
        echo
        echo "ion-tsconfig version: "`IonVersionGetMajor`"."`IonVersionGetMinor`"."`IonVersionGetRelease`" ("`IonVersionGetGitHash`")"
    fi
    echo
    echo "Usage: TSconfig [options]"
    echo -e "\t--configure-server            Configure this server as a head node (WARNING: This will update the Torrent Suite)"
    echo -e "\t--reconfigure                 Re-run Configuration steps (Without updating the Torrent Suite)"
    echo -e "\t--configure-instrument-support Add support for direct connected instruments"
    echo -e "\t--change-hostname, -r         Change the server's hostname"
    echo -e "\t--update-torrent-suite, -s    Update Ion software packages"
    echo -e "\t--configure-timezone, -z      Set timezone."
    echo -e "\t--configure-postfix, -p       Configure postfix mailer"
    echo -e "\t--purge-all-deb               Deletes all debian packages in apt cache directory"
    if [ "$ENABLE_DEPRECATION" == "True" ]; then
      echo -e "\t--switch-repo, -w             Switch repo between PGM/Proton and S5. Run --update-torrent-suite(-s) after this"
    fi
    echo -e "\t--help, -h                    Prints command line args"
    echo -e "\t--version                     Prints version"
    echo
    echo "Advanced options:"
    echo -e "\t--debug, -d                   Turns on verbose shell execution"
    echo -e "\t--force, -f                   Override disk space warnings"
    echo -e "\t--eth-dev, -e <device>        Specify ethernet device, default is port assigned default route"
    echo -e "\t--apt-usb                     Use Ion Install USB drive for deb pkg repository"
    echo -e "\t--skip-init                   Do not execute passwd reset, timezone setup during --configure* operations"
    echo -e "\t--skip-instrument-config      Disables FTP,DHCP,IPTABLES configuration during --configure* operations"
    echo -e "\t--configure-ftp               Configures FTP Service.  Only makes sense with these options: --configure-server --skip-pgm-config"
    echo -e "\t--configure-ntp               Configures Network Time Protocol Service.  Only makes sense with these options: --configure-server --skip-pgm-config"
    echo -e "\t--security-update             Check for and install packages with security updates"
    echo -e "\t--update-cluster              Check for and install Ion Software updates on the cluster nodes"
    echo -e "\t--configure-apt-cache         Installs apt-cacher-ng and configures headnode"
    echo
}
function print_help_1404()
{
    if [ -f /opt/ion/bin/ion-tsconfig.version.env ]; then
        source /opt/ion/bin/ion-tsconfig.version.env
        echo
        echo "ion-tsconfig version: "`IonVersionGetMajor`"."`IonVersionGetMinor`"."`IonVersionGetRelease`" ("`IonVersionGetGitHash`")"
    fi
    echo
    echo "Usage: TSconfig [options]"
    echo -e "\t--configure-server                Configure this server as a head node (Without updating the Torrent Suite)"
    echo -e "\t--reconfigure                     Re-run Configuration steps (Without updating the Torrent Suite nor requiring network connection)"
    echo -e "\t--update-torrent-suite, -s        Update installed software packages"
    echo -e "\t--change-hostname, -r [hostname]  Change the server's hostname. Include optional hostname to avoid interactive prompts"
    echo -e "\t--configure-timezone, -z          Set timezone."
    echo -e "\t--configure-postfix, -p           Configure postfix mailer"
    echo -e "\t--purge-all-deb                   Deletes all debian packages in apt cache directory"
    if [ "$ENABLE_DEPRECATION" == "True" ]; then
      echo -e "\t--switch-repo, -w                 Switch repo between PGM/Proton and S5. Run --update-torrent-suite(-s) after this"
    fi
    echo -e "\t--help, -h                        Prints command line args"
    echo -e "\t--version                         Prints version"
    echo
    echo "Advanced options:"
    echo -e "\t--debug, -d                   Turns on verbose shell execution"
    echo -e "\t--force, -f                   Override disk space warnings"
    echo -e "\t--security-update             Check for and install packages with security updates"
    echo
}
#---    ---#
function how_many_options ()
{
    CNT=0
    if [ $CONF_HEAD_NODE -gt 0 ]; then ((CNT++)); fi
    if [ $CONF_COMPUTE_NODE -gt 0 ]; then ((CNT++)); fi
    if [ $UPDATE_SOFTWARE -gt 0 ]; then ((CNT++)); fi
    if [ $UPDATE_HOSTNAME -gt 0 ]; then ((CNT++)); fi
    if [ $CONF_TIME_ZONE -gt 0 ]; then ((CNT++)); fi
    if [ $CONF_POSTFIX -gt 0 ]; then ((CNT++)); fi
    if [ $UNCONF_SERVER -gt 0 ]; then ((CNT++)); fi
    if [ $PURGE_ALL_DEB -gt 0 ]; then ((CNT++)); fi
    if [ $RECONFIGURE -gt 0 ]; then ((CNT++)); fi

    echo $CNT
    return $CNT
}

#--------------------------------------
# Install/Update Master Server
#--------------------------------------
function config_head_node()
{

    echo "Head Node Configuration:"

    # Check tag
    if ! is_master; then
        user_msg "WARNING: This server is configured as a compute node."
        user_msg "To configure this server as a master node, first run the unconfigure command"
        user_msg "Then run TSconfig --configure-server"
        error "$0:$LINENO" "This server is configured as a compute node"
    fi

    # ensure tag is correct for master node
    touch /opt/ion/.masternode
    write_conf_file
    config_ionSoftware

    # Set host location of Ion Torrent Server Daemons
    config_cluster_settings

    return 0
}

#--------------------------------------
# Install/Update Compute Server
#--------------------------------------
function config_compute_node ()
{

    echo "Compute Node Configuration:"

    # Check tag
    if is_master; then
        # Since is_master will assume master node when no configuration exists, test again
        if [ -e /opt/ion/.masternode ]; then

            echo "WARNING: This server is configured as a master node."
            echo "To configure this server as a compute node, first run the unconfigure command"
            echo "Then run TSconfig --configure-compute"
            error "$0:$LINENO" "This server is configured as a master node"

        fi
    fi

    # ensure tag is correct for compute node
    touch /opt/ion/.computenode
    write_conf_file

    # Get name of head node server
    get_user_input_compute

    # Remove gridengine packages to force re-init
    apt-get --assume-yes --force-yes purge gridengine-common gridengine-client gridengine-exec

    config_ionSoftware

    # Set host location of Ion Torrent Server Daemons
    config_cluster_settings

    return 0
}

#--------------------------------------
# Update Torrent Suite Software
#--------------------------------------
function config_ionSoftware()
{
    echo "Function: config_ionSoftware" 1>&2
    startime=$(date +%s)
    # Install/Update system-level software packages
    preinst_system_packages
    echo Elapsed: $(($(date +%s)-$startime)) 1>&2
    install_system_packages
    echo Elapsed: $(($(date +%s)-$startime)) 1>&2
    if [ $SECURITY_UPDATE == 1 ]; then
        install_security_upgrades
        echo Elapsed: $(($(date +%s)-$startime)) 1>&2
    else
        log "Skipping security upgrade"
    fi
    config_system_packages
    echo Elapsed: $(($(date +%s)-$startime)) 1>&2
    # Install/Update Torrent Suite software packages
    preinst_ion_packages
    echo Elapsed: $(($(date +%s)-$startime)) 1>&2
    install_ion_packages
    echo Elapsed: $(($(date +%s)-$startime)) 1>&2
    config_ion_packages
    echo Elapsed: $(($(date +%s)-$startime)) 1>&2
    update_conf_file
    echo Elapsed: $(($(date +%s)-$startime)) 1>&2
    updated_mirror_check
    echo Elapsed: $(($(date +%s)-$startime)) 1>&2
}

#-------------------------------------------------
# Re-run configuration of Torrent Server Head Node
#-------------------------------------------------
function reconfig_head_node ()
{
    echo "Head Node Re-running Configuration:" 1>&2

    # Check tag
    if ! is_master; then
        user_msg "WARNING: This server is configured as a compute node."
        user_msg "To configure this server as a master node, first run the unconfigure command"
        user_msg "Then run TSconfig --configure-server"
        error "$0:$LINENO" "This server is configured as a compute node"
    fi

    # ensure tag is correct for master node
    touch /opt/ion/.masternode
    update_conf_file

    #config_ionSoftware
    # Here we intend to do all configuration steps without updating any ion software packages
    config_system_packages
    reconfig_ion_packages

    return 0
}

#-------------------------------------------------
# Re-run configuration of Torrent Server Compute Node
#-------------------------------------------------
function reconfig_compute_node ()
{

    echo "Compute Node Re-running Configuration:" 1>&2

    # Check tag
    if is_master; then
        # Since is_master will assume master node when no configuration exists, test again
        if [ -e /opt/ion/.masternode ]; then

            echo "WARNING: This server is configured as a master node."
            echo "To configure this server as a compute node, first run the unconfigure command"
            echo "Then run TSconfig --configure-compute"
            error "$0:$LINENO" "This server is configured as a master node"

        fi
    fi

    # ensure tag is correct for compute node
    touch /opt/ion/.computenode
    update_conf_file

    # Get name of head node server
    get_user_input_compute

    # Remove gridengine packages to force re-init
    apt-get --assume-yes --force-yes purge gridengine-common gridengine-client gridengine-exec

    # Do everything except update Ion Packages.
    preinst_system_packages
    install_system_packages
    config_system_packages
    reconfig_ion_packages

    # Set host location of Ion Torrent Server Daemons
    config_cluster_settings

    return 0
}

#---------------------------------------------
# REALLY removes everything from torrentserver
#---------------------------------------------
function scrub_torrentserver()
{
    # WARNING: This will remove non-ion packages possibly destroying user data, configurations, etc.
    log "Scrub Torrent Server"
    user_msg "=================================================================="
    user_msg "All Ubuntu Software installed by Torrent Server installation will be removed"
    user_msg "WARNING!!!"
    user_msg "This will remove things like apache2, postgresql, gridengine"
    user_msg "User data may get deleted"
    user_msg "For ION internal use only"
    user_msg "You have been warned!"
    user_msg "=================================================================="

    pkg_list=(
	gridengine-common
	gridengine-client
	gridengine-exec
    gridengine-master
	gridengine-qmon
    vsftpd
	postgresql
	apache2-mpm-prefork
    apache2-mpm-itk
    apache2-utils
    apache2-bin
    apache2-common
	apache2
	libapache2-mod-wsgi
	libapache2-mod-php5
	dnsmasq
	dhcp3-server
	tomcat6
	tomcat6-admin
	nxclient
	nxnode
	nxserver
    python-django
    python-django-celery
    python-django-kombu
    python-django-picklefield
    bfast
    emboss-data
    emboss-lib
    )
    user_msg "=================================================================="
    user_msg "Packages which will be removed (using apt-get remove command )"
    user_msg "=================================================================="
    for pkg in ${pkg_list[@]}; do
        user_msg "\t$pkg"
    done

    echo -n "Do you REALLY want to delete these packages? (n|Y) "
    read usrmsg
    case $usrmsg in
        y|Y)
        ;;
        *)
        exit 1
        ;;
    esac

    for pkg in ${pkg_list[@]}; do
        if dpkg -l $pkg|grep ^ii > /dev/null; then
            user_msg "\tRemoving $pkg"
            apt-get --assume-yes --force-yes remove --purge $pkg 1>&2
        else
            echo "$pkg not installed"
        fi
    done

    # Remove any other dependent packages no longer required
    apt-get --assume-yes autoremove
}

#---    ---#
function config_pgm_support()
{
    log "Configuring as raw data server"
    user_msg "=================================================================="
    user_msg "Configuring as raw data server"
    user_msg "=================================================================="

    config_iptables
    config_PGM_interface
    config_ftp
    invoke-rc.d networking restart 1>&2
    config_dhcp
    config_ntp_server

    return 0
}

function remove_pgm_support ()
{
    #/etc/iptables
    if [ -e /etc/iptables.rules ]; then
        #--- Delete previous definitions ---#
        sed -i '/Torrent Server/d' /etc/iptables.rules 2>/dev/null
        sed -i '/*filter/,/COMMIT/d' /etc/iptables.rules 2>/dev/null
        sed -i '/*nat/,/COMMIT/d' /etc/iptables.rules 2>/dev/null
    fi

    #/etc/network interfaces
    #if valid_port eth1; then ifdown eth1; fi
    #if valid_port eth2; then ifdown eth2; fi
    #if valid_port eth3; then ifdown eth3; fi
    #if valid_port eth4; then ifdown eth4; fi

    #--- Remove any previous definitions for interfaces ---#
    sed -i '/auto eth1/,/netmask 255.255.255.0/d' /etc/network/interfaces
    sed -i '/auto eth2/,/netmask 255.255.255.0/d' /etc/network/interfaces
    sed -i '/auto eth3/,/netmask 255.255.255.0/d' /etc/network/interfaces
    sed -i '/auto eth4/,/netmask 255.255.255.0/d' /etc/network/interfaces
    sed -i '/auto eth5/,/netmask 255.255.255.0/d' /etc/network/interfaces
    #--- delete all consecutive blank lines, allows 0 blanks at top, 1 at EOF ---#
    sed -i '/./,/^$/!d' /etc/network/interfaces

    #--- Delete any existing config file ---#
    if [ -w /etc/dnsmasq.d/ion-dhcp ]; then
        rm -f /etc/dnsmasq.d/ion-dhcp
    fi

    #--- Backup old config file ---#
    if [ -w /etc/dhcp3/dhcpd.conf.old ]; then
        mv /etc/dhcp3/dhcpd.conf.old /etc/dhcp3/dhcpd.conf
    fi

    #---    Edit dhclient.conf          ---#
    if [ -e /etc/dhcp3/dhclient.conf.orig ]; then
        mv /etc/dhcp3/dhclient.conf.orig /etc/dhcp3/dhclient.conf
    fi

    # Cleanup pgm hosts definitions
    rm -f /etc/hosts-dnsmasq
    # Cleanup /etc/hosts (for very old installations only)
    sed -i '/^192.168.201.10[[:blank:]]pgm1/d' /etc/hosts
    sed -i '/^192.168.202.10[[:blank:]]pgm2/d' /etc/hosts
    sed -i '/^192.168.203.10[[:blank:]]pgm3/d' /etc/hosts
    sed -i '/^192.168.204.10[[:blank:]]pgm4/d' /etc/hosts

    if [ -e /etc/init.d/dhcp3-server ]; then service dhcp3-server stop 1>&2; fi
    if [ -e /etc/init.d/dnsmasq ]; then service dnsmasq stop 1>&2; fi
    #apt-get --assume-yes --force-yes purge dhcp3-server dnsmasq

    return 0
}

#---    ---#
function ion_daemon_ctrl()
{
    case $1 in
        start)
        echo "=================================================================="
        echo "Starting Torrent Suite daemons"
        echo "=================================================================="
        if [ -e /etc/init.d/ionJobServer  ]; then invoke-rc.d ionJobServer start 1>&2; fi
        if [ -e /etc/init.d/ionCrawler  ]; then invoke-rc.d ionCrawler start 1>&2; fi
        if [ -e /etc/init.d/ionPlugin  ]; then invoke-rc.d ionPlugin start 1>&2; fi
        if [ -e /etc/init.d/celeryd ]; then invoke-rc.d celeryd start 1>&2; fi
        ;;
        stop)
        echo "=================================================================="
        echo "Stopping Torrent Suite daemons"
        echo "=================================================================="
        if [ -e /etc/init.d/ionJobServer  ]; then invoke-rc.d ionJobServer stop 1>&2; fi
        if [ -e /etc/init.d/ionCrawler  ]; then invoke-rc.d ionCrawler stop 1>&2; fi
        if [ -e /etc/init.d/ionPlugin  ]; then invoke-rc.d ionPlugin stop 1>&2; fi
        if [ -e /etc/init.d/celeryd ]; then invoke-rc.d celeryd stop 1>&2; fi
        ;;
        restart)
        echo "=================================================================="
        echo "Restarting Torrent Suite daemons"
        echo "=================================================================="
        if [ -e /etc/init.d/ionJobServer  ]; then invoke-rc.d ionJobServer restart 1>&2; fi
        if [ -e /etc/init.d/ionCrawler  ]; then invoke-rc.d ionCrawler restart 1>&2; fi
        if [ -e /etc/init.d/ionPlugin  ]; then invoke-rc.d ionPlugin restart 1>&2; fi
        if [ -e /etc/init.d/celeryd  ]; then invoke-rc.d celeryd restart 1>&2; fi
        ;;
    esac
    return 0
}

#---    ---#
function network_tests()
{
    #---    our tests   ---#
    #
    #   Test Case: Not cabled into network
    #
    #   Test Case: Cabled, no DHCP
    #
    #   Test Case: Cabled, DHCP, no name resolution
    #
    #   Test Case:
    #
    #---    end docs    ---#
    echo "Testing Network Connectivity" 1>&2
    user_msg "=================================================================="
    user_msg "Testing Network Connectivity"
    user_msg "=================================================================="
    device=$1
    if [ "$device" == "" ]; then
        user_msg "No ethernet device specified.  Exiting."
        return 1
    fi

    if /sbin/ifconfig $device > /dev/null; then
        echo "Network device $device is enabled" 1>&2
    else
        user_msg "Network device $device is not enabled"
        return 1
    fi

    # check for connectivity
    if (/sbin/ifconfig $device | grep UP | grep MTU &> /dev/null); then
        echo "GOOD - the '$device' ethernet port is UP" 1>&2
    else
        user_msg "***ERROR***"
        user_msg "The '$device' network port is not UP."
        return 1
    fi

    # test name resolution
    hName=$(hostname -f)
    echo "Test name resolution for host $hName" 1>&2
    if address=$(dig +short +search $hName); then
        if [ "$address" != "" ]; then
            echo "Good this server's hostname ($hName) resolves to address $address" 1>&2
        else
            echo "This server's hostname ($hName) does not resolve to an IP address" 1>&2
            echo "using the command: dig +short +search $hName" 1>&2
        fi
    else
        echo "This server's hostname ($hName) does not resolve to an IP address" 1>&2
        echo "using the command: dig +short +search $hName" 1>&2
        echo "returns this error:" 1>&2
        $address 1>&2
    fi


    if (/bin/netstat -r | grep default &> /dev/null); then
        echo "GOOD - we can connect to the local network" 1>&2
    else
        user_msg "a little trouble...  we're not able to find a default route to the local network."
        user_msg
        user_msg "Double check connectivity.  Possibly something didn't work in the IP configuration."
        user_msg "Maybe try rebooting the server to force it to pick up it's IP address again, then"
        user_msg "retry this test."
        user_msg
        return 1
    fi

    # print IP address netmask
    echo "Full Hostname:   $(hostname -f)" 1>&2
    echo "Simple Hostname: $(hostname)" 1>&2
    echo "Server Domain:   $(hostname -d)" 1>&2

    echo "No network issues detected" 1>&2
    return 0
}

#--------------------------------------
#NOTE: sge_master_node variable is used elsewhere
#--------------------------------------
function get_user_input_compute()
{
    currentNodeName=$(hostname -f)

    # Get Head Node Hostname
    noanswer=1
    while [ $noanswer -eq 1 ]
    do
        echo
        echo -n "Enter full hostname of the Head node: "
        read -p "Enter full hostname of the Head node: " sge_master_node
        if [ "$sge_master_node" != "" ]; then
            # Test hostname for connectivity
            if test_name_resolution $sge_master_node; then
                noanswer=0
            else
                echo "Could not connect to $sge_master_node"
                echo "Type Ctrl-C to quit or try again"
            fi
        fi
    done
    # Ion Daemons Hostname
    noanswer=1
    while [ $noanswer -eq 1 ]
    do
        echo
        echo -n "Enter hostname of server where Ion daemons are running: "
        read -p "Enter hostname of server where Ion daemons are running: " input
        idaemon_host="${input:-$sge_master_node}"
        if [ "$idaemon_host" != "" ]; then
            # Test hostname for connectivity
            if test_name_resolution $idaemon_host; then
                noanswer=0
            else
                echo "Could not connect to $idaemon_host"
                echo "Type Ctrl-C to quit or try again"
            fi
        fi
    done

    #   Ensure the compute node is added as an admin host to SGE configuration.
    echo
    echo
    echo "This hostname '$currentNodeName' must be added as an admin host to the SGE configuration."
    echo "Log onto $sge_master_node and run this command:"
    echo "     sudo qconf -ah $currentNodeName"
    echo
    echo "This must be done prior to running the SGE configuration on this host"
    echo
    echo "Do not continue if this step has not been executed."
    echo
    echo -n "Press Enter to continue, Ctrl-C to exit"
    read -p "Press Enter to continue, Ctrl-C to exit"
    echo

    # Postgresql server is the same as sge qmaster node
    postgresql_server=$sge_master_node
    databaseServerPort=5432

    return 0
}

function get_input_hostname()
{

    oldHostName=$(hostname)

    #--- get user to enter a valid hostname ---#
    dithering=1
    while [ $dithering -eq 1 ]
    do
        echo -e "\nCurrent hostname is '$oldHostName'"
        echo -n "Enter new hostname: "
        read -p "Enter new hostname: " answer
        case $answer in
            "")
                echo "Huh?"
                dithering=1
            ;;
            "master")
                echo "Anything except 'master', please.  Its confusing to SGE"
                dithering=1
            ;;
            "ts" | "pgm1" | "pgm2" | "pgm3" | "pgm4")
                echo "$answer is a reserved hostname for Torrent Server"
                echo "Please choose another name."
                dithering=1
            ;;
            *\ *)
                echo "There should not be any spaces in the name"
                dithering=1
            ;;
            *)
                if ! IsValidHostname $answer; then
                    echo "Invalid hostname.  Try again"
                    echo "The only acceptable characters are alphanumerics and hyphens,"
                    echo "and the host name can not start nor end with a hyphen."
                    dithering=1
                else
                    echo "Changing hostname to $answer"
                    newHostName=$answer
                    dithering=0
                fi
            ;;
        esac
    done

    #---    get user to enter a domain name ---#
    oldDomainName=$(hostname -f|cut -f2- -d'.')
    # case of where there is no domainname defined
    if [ "$oldDomainName" == "$(hostname -f)" ]; then
        oldDomainName=""
    fi
    dithering=1
    while [ $dithering -eq 1 ]
    do
        echo -e "\nCurrent domain name is '$oldDomainName'"
        echo -n "Enter domain name: "
        read -p "Enter domain name: " answer
        case $answer in
            "")
                echo "No domain name is entered."
                newDomainName=$answer
                dithering=0
            ;;
            "master")
                echo "Anything except 'master', please.  Its confusing to SGE"
                dithering=1
            ;;
            *\ * )
                echo "There shold not be any spaces in the name."
                dithering=1
            ;;
            *)
                if ! IsValidDomainName $answer; then
                    echo "Invalid domain name. Try again"
                    echo "The only acceptable characters are alphanumerics, hyphens, and dots,"
                    echo "and the domain name can not start nor end with a hyphen or a dot."
                    dithering=1
                else
                    echo "Using domain name '$answer'"
                    newDomainName=$answer
                    dithering=0
                fi
            ;;
        esac
    done

    #---    set FQDN    ---#
    oldFQDN=$(/bin/hostname -f)
    if [ "${newDomainName}" == "" ]; then
        newFQDN=${newHostName}
    else
        newFQDN=${newHostName}.${newDomainName}
    fi
}

function change_hostname()
{
    # User prompts to get new hostname and domain
    # Defines three variables: newHostName, newDomainName, newFQDN
    get_input_hostname
    log "Changing $oldFQDN to $newFQDN"
    log "Changing hostname from $oldFQDN to $newFQDN ..."

    log "Backing-up configuration files after hostname change."
    #--- Change hostname where applicable ---#
    if [ -f /etc/postfix/main.cf ]; then
        sed -i "s:\(.*\) = $oldFQDN\(.*\):\1 = $newFQDN\2:" /etc/postfix/main.cf
        copy_conf_file /etc/postfix/main.cf
        log "... postfix/main.cf -- updated and backed-up"
    fi
    if [ -f /etc/mailname ]; then
        sed -i "s:$oldFQDN:$newFQDN:" /etc/mailname
        copy_conf_file /etc/mailname
        log "... mailname -- updated and backed-up"
    fi
    if [ -f /etc/dhcp3/dhclient.conf ]; then
        sed -i 's/send host-name .*;/send host-name "<hostname>";/' /etc/dhcp3/dhclient.conf
        copy_conf_file /etc/dhcp3/dhclient.conf
    fi

    if is_master; then
        :
    else
        sge_delete_host ${oldFQDN}
    fi

    # Shutdown SGE
    /etc/init.d/gridengine-exec stop
    if is_master; then /etc/init.d/gridengine-master stop; fi

    #--- Change name of server ---#
    hostname $newHostName
    sed -i "s/127.0.1.1.*/127.0.1.1\t$newFQDN\t$newHostName/" /etc/hosts
    echo ${newHostName} > /etc/hostname
    copy_conf_file /etc/hosts
    copy_conf_file /etc/hostname
    log "... /etc/hosts and hostname -- updated and backed-up."


    if is_master; then
        echo "${newFQDN}" > /var/lib/gridengine/iontorrent/common/act_qmaster
        echo "${newFQDN} localhost" > /var/lib/gridengine/iontorrent/common/host_aliases
    else
        # Compute nodes need to remove themselves from SGE configuration
        #sge_delete_host ${oldFQDN}
        :
    fi

    if is_master && [ -x /usr/sbin/TSmake-ssl-cert ]; then
        # Regenerate self-signed SSL cert with current hostname
        /usr/sbin/TSmake-ssl-cert generate-default-snakeoil --force-overwrite
    fi

    hostfiles=$(find /usr/share/ion-tsconfig/ansible -name torrentsuite_hosts\*)
    for hostfile in ${hostfiles[@]}; do
        sed -i "s/${oldFQDN}/${newHostName}/g" $hostfile
    done

    # Reboot
    echo
    echo
    echo "To complete the renaming process, the server must be rebooted"
    echo
    echo -n "Press Enter to reboot the server "
    read -p "Press Enter to reboot the server "
    shutdown -r now
}

function IsValidHostname ()
{
        # Regex from http://stackoverflow.com/questions/106179/regular-expression-to-match-hostname-or-ip-address
        #regex="^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$";
        # This one does not allow dots but allows starting with a digit
        regex="^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]))*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$";

        name=$1
        if [[ $name =~ $regex ]] ; then
            return 0
        else
            # Not valid
            return 1
        fi
}

function IsValidDomainName ()
{
        # This one does allow dots and allows starting with a digit
        regex="^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$";

        name=$1
        if [[ $name =~ $regex ]] ; then
            return 0
        else
            # Not valid
            return 1
        fi
}

function test_name_resolution ()
{
    ## Method relies on external name server; not the best method
    #name_to_test=$1
    #/usr/bin/host $name_to_test > /dev/null
    #stat=$?
    #return $stat

    # more reliable as it uses /etc/hosts as well as nameserver
    #   Do not want to test the loopback address, if set so comment it out
    #   b/c SGE does not like loopback addresses
    sed -i 's/^127.0.1.1*/#127.0.1.1/' /etc/hosts

    #   Use ping to see if the hostname resolves to outside address
    name_to_test=$1
    echo "Testing $name_to_test"
    if ! ping -c 3 -q $name_to_test 2>&1 >/dev/null; then
        #echo "Could not ping '$name_to_test'"
        stat=1
    else
        #echo "success"
        stat=0
    fi

    #   Return loopback to uncommented state
    sed -i 's/#127.0.1.1*/127.0.1.1/' /etc/hosts

    return $stat
}

function get_Netmask ()
{
    port=$(outbound_net_port)
    [[ -z $port ]] && port="eth0"
    ETH_DEV=${ETH_DEV:-"$port"}   #default if not defined elsewhere
    IP=$(/sbin/ifconfig ${ETH_DEV} | awk '/inet / { print $2 } ' | sed -e s/addr://)
    MASK=$(/sbin/ifconfig ${ETH_DEV} | awk '/inet a/ { print $4 } ' | sed -e s/Mask://)
    if [ "$IP" = "" ]||[ "$MASK" = "" ]; then
        local_netmask="0.0.0.0"
    else
    dhcp_ip=${IP}
    local_netmask=$(( `echo $IP | cut -d"." -f 1` & `echo $MASK | cut -d"." -f 1` )).\
$(( `echo $IP | cut -d"." -f 2` & `echo $MASK | cut -d"." -f 2` )).\
$(( `echo $IP | cut -d"." -f 3` & `echo $MASK | cut -d"." -f 3` )).\
$(( `echo $IP | cut -d"." -f 4` & `echo $MASK | cut -d"." -f 4` ))
    fi
}

function cleanup_previousInstallations()
{
    log "Cleaning up old files from previous installations"

    #-----------------------------------
    # Remove deprecated ion software
    #-----------------------------------
    if dpkg -l|grep -q ion-eaplugins; then
        dpkg -P ion-eaplugins 1>&2 || true
    fi

    #---    Clean up old python pages
    DIR=$(python -c "from distutils.sysconfig import get_python_lib; print get_python_lib(prefix='/usr/local')")
    DIR2="/usr/local/lib/python2.6/dist-packages/" ## Intentionally hardcoding old path

    FILES=(
            drmaa-0.4b3
            django-tastypie-0.9.7
            distribute-0.6.14
            simplejson-2.1.6
            calabash-0.0.3
            argparse-1.2.1
            jsonpipe-0.0.7
            Cython-0.15
            pysam-0.5
            mimeparse.py
            mimeparse.pyc
            easy-install.pth
            setuptools.pth
            )
    for f in ${FILES[@]}; do
        rm -rf ${DIR}/${f}*
        rm -rf ${DIR2}/${f}*
    done

    # Some files left in /usr/local/bin from jsonpipe-0.0.7 tarball
    # Required for upgrade from 1.4,1.5 to 2.0
    rm -f /usr/local/bin/jsonpipe
    rm -f /usr/local/bin/jsonunpipe
    rm -f /usr/local/bin/easy_install
    rm -f /usr/local/bin/easy_install-2.6
    rm -f /usr/local/bin/cygdb
    rm -f /usr/local/bin/cython

    # Remove settings.sh from bashrc
    if grep "/opt/sge/iontorrent/common/settings.sh" ~ionadmin/.bashrc >/dev/null; then
        # Remove the line
        sed -i '/\/opt\/sge\/iontorrent\/common\/settings.sh/d' ~ionadmin/.bashrc
    fi

    # Remove export of SGE directory
    if [ -e /etc/exports ]; then
        sed -i '/\/opt\/sge/d' /etc/exports ||true
        exportfs -ua 1>&2 || true
        exportfs -a 1>&2 || true
    fi

    if ps aux|grep sge_execd|grep -v grep > /dev/null; then
        if [ -f /etc/init.d/sgeexecd ];
        then
            log "Removing legacy tarball SGE"
            invoke-rc.d sgeexecd stop
        fi
    fi

    if ps aux|grep sge_qmaster|grep -v grep > /dev/null; then
        if [ -f /etc/init.d/sgemaster ];
        then
            invoke-rc.d sgemaster stop
        fi
    fi

    # Ensure no sge daemons are running any longer - they mess up subsequent configuration steps
    # and sometimes normal shutdown commands are ineffective.
    if [ -f /etc/init.d/gridengine-exec ]; then /etc/init.d/gridengine-exec stop > /dev/null; fi
    if [ -f /etc/init.d/gridengine-master ]; then /etc/init.d/gridengine-master stop > /dev/null; fi
    for pid in `ps aux|grep sge_|grep -v grep|awk '{print $2}'`; do
        kill -9 $pid || true
    done

    # remove tarball SGE version
    rm -rf /opt/sge
    rm -f /etc/init.d/sgeexecd
    rm -f /etc/init.d/sgemaster

    # Previous versions <2.2 created malformed /etc/ntp.conf files
    # remove the malformed line.
    if [ -f /etc/ntp.conf ]; then
        sed -i '/$local_netmask/d' /etc/ntp.conf
    fi

    # Remove from the ssh login screen the listing of packages with updates available
    #apt-get --assume-yes --force-yes remove landscape-common 1>&2 || true
    dpkg -P landscape-common 1>&2 || true

    # Modify dhcp lease time, only if it still the default that our scripts used to set
    if [ -r /etc/dhcp3/dhcpd.conf ]; then
        sed -i 's/default-lease-time 86400;/default-lease-time 300;/' /etc/dhcp3/dhcpd.conf
        sed -i 's/max-lease-time 172800;/max-lease-time 300;/' /etc/dhcp3/dhcpd.conf
        if [ -e /etc/init.d/dhcp3-server ]; then service dhcp3-server force-reload 1>&2 || true; fi
    fi

    # Make sure /results directory has world write permissions (fixes a bug in TS1.4)
    # Trap the error; do not want to exit if it fails.  May fail on nfs mounted directories.
    if [ -d /results ]; then chmod 777 /results || true; fi

    # Previous versions of ion-dbreports created Report archive/export directories as root owner and 755 permissions
    # Change permissions to 777
    # Directories will be in /media only and named 'archivedReports' and 'exportedReports'
    for dire in $(find /media -maxdepth 2 -type d -name archivedReports -o -name exportedReports); do
        if [ $(stat -c'%a' $dire) != '777' ]; then
            echo "Changing permissions on $dire" 1>&2
            chmod -R 0777 $dire || true
        else
            echo "Permissions are okay on $dire" 1>&2
        fi
    done

    # Ensure insecure tomcat user is not enabled
    infile="/etc/tomcat6/tomcat-users.xml"
    if [ -e $infile ]; then
        if grep -q "<user username=\"tomcat\" password=\"tomcat\"" $infile; then

            sed -i '/^.*<user username="tomcat" password="tomcat".*/d' $infile

            echo -e "<!-- default tomcat user deleted by TSconfig script\n" \
                    "    do not use the default tomcat password -->" >>  $infile

            service tomcat6 restart 1>&2
        fi
    fi

    # File created with TS 4.0
    rm -f /MegaSAS.log 1>&2 || true

    # TS-8145.  Some servers fail to upgrade due to this stale link
    rm -f /opt/ion/iondb/media/RunRecognitION || true

    return 0
}

function pkg_installation ()
{
    if [ -z $1 ]; then
        echo "ERROR: No package list provided"; return 1
    else
        pkg_list=$1
    fi

    # function to restore backed-up /etc/apt/sources.list
    function cleanup_tmp_src_list () { if [ -f $1 ]; then mv $1 /etc/apt/sources.list; fi; }

    #------------------------------------------------------
    # Check for valid source of deb files
    #------------------------------------------------------
    TMP_SRC_LST=/etc/apt/sources.list._temp
    # Check to use local USB drive repository
    if [ $APT_USB -eq 1 ]; then
        #---                                                                ---#
        #---    Temporarily override the existing /etc/apt/source.list file ---#
        #---                                                                ---#
        if [ -f $TMP_SRC_LST ]; then
            # error for this to exist, must be from previous error
            :
        else
            if [ -f /etc/apt/sources.list ]; then
                mv /etc/apt/sources.list $TMP_SRC_LST
            fi
        fi

        #---                                                                ---#
        #---    Search for Packages.gz file                                 ---#
        #---                                                                ---#
        updatesPath=$(find $PWD -name Packages.gz | grep updates/Packages.gz 2>/dev/null)
        updatesPath=$(echo $updatesPath|awk '{print $1}')   #filter single entry
        if [ "${updatesPath}" == "" ]; then
            updatesPath=$(find /media -name Packages.gz 2>/dev/null)
            updatesPath=$(echo $updatesPath|awk '{print $1}')   #filter single entry
            if [ "${updatesPath}" == "" ]; then
                echo "ERROR: Could not find any Torrent Server installation media."
                echo
                return 1
            fi
        fi
        mediapath=$(dirname $(dirname ${updatesPath}))
        echo "deb file:${mediapath}/ updates/" > /etc/apt/sources.list
        echo "Installing from ${mediapath}/updates"
    else

        #---                                                        ---#
        #---    Test for access to update servers                   ---#
        #---                                                        ---#
        errCnt=0
        ubuntu_codename=$(distrib_name)
        if ! wget -nv -o /tmp/_wget.log -P /tmp ${TSCONFIG_ION_UPDATE_URL}/updates/software/${ubuntu_codename}/Packages.gz; then
            user_msg "Failed to contact Ion Software update server (${TSCONFIG_ION_UPDATE_URL})."
            user_msg "can not download files from ${TSCONFIG_ION_UPDATE_URL}/updates/software/${ubuntu_codename}/"
            user_msg "with wget using http protocol via port 80."
            echo
            ((errCnt++)) || true
        else
            rm -f /tmp/Packages.gz
            user_msg "=================================================================="
            user_msg "\tAccess to Ion Torrent Software Update Repository confirmed"
            user_msg "=================================================================="
        fi

        if [ $errCnt -eq 0 ]; then
            if ! wget -nv -a /tmp/_wget.log -P /tmp ${TSCONFIG_UBUNTU_UPDATE_URL}/ubuntu/dists/${ubuntu_codename}-updates/main/binary-amd64/Release; then
                user_msg "Failed to contact Ubuntu update server (${TSCONFIG_UBUNTU_UPDATE_URL})."
                user_msg "can not download files from ${TSCONFIG_UBUNTU_UPDATE_URL}/ubuntu/dists/${ubuntu_codename}-updates/main/binary-amd64/"
                user_msg "with wget using http protocol via port 80."
                ((errCnt++)) || true
            else
                rm -f /tmp/Release
                user_msg "=================================================================="
                user_msg "\tAccess to Ubuntu Update Repository confirmed"
                user_msg "=================================================================="
            fi
        fi

        if [ $errCnt -ne 0 ]; then
            if [ -f /tmp/_wget.log ]; then
                user_msg "From wget error log:"
                user_msg "`cat /tmp/_wget.log`"
                rm -f /tmp/_wget.log
            fi
            user_msg "Software update has failed.  Please contact IT with above error messages."
            return 1
        fi
        rm -f /tmp/_wget.log
    fi

    # Undo any package holds we might have enabled previously
    release_pkg_holds

    # Set any package holds we may need:
    set_pkg_holds

    apt-get update 1>&2 || true

    # Download packages first
    user_msg "=================================================================="
    user_msg "\tDownloading packages"
    user_msg "=================================================================="
    for pkg in ${pkg_list[@]}; do
        echo -n "."
        if ! apt-get --assume-yes --force-yes --download-only install $pkg 1>&2; then
            user_msg "ERROR downloading $pkg"
            cleanup_tmp_src_list $TMP_SRC_LST
            return 1
        fi
    done
    echo ""

    user_msg "=================================================================="
    user_msg "\tInstalling packages"
    user_msg "=================================================================="
    for pkg in ${pkg_list[@]}; do
        echo -n "."
        if ! apt-get --assume-yes --force-yes install $pkg 1>&2; then
            user_msg "ERROR installing $pkg"
            cleanup_tmp_src_list $TMP_SRC_LST
            return 1
        fi
    done
    echo ""

    cleanup_tmp_src_list $TMP_SRC_LST
}


function install_security_upgrades ()
{
    echo "Function: install_security_upgrades" 1>&2
    user_msg "=================================================================="
    user_msg "\tInstalling security upgrades"
    user_msg "=================================================================="
    #unattended-upgrade --dry-run --debug 1>&2
    unattended-upgrade --debug 1>&2

    #Alternate method used by Update Server GUI
    #Tests show both methods update the same packages
    #grep lucid-security /etc/apt/sources.list > /etc/apt/secsrc.list
    #apt-get -o Dir::Etc::sourcelist=secsrc.list -o Dir::Etc::sourceparts=- update
    #secpkglist=( $(apt-get --dry-run upgrade|grep ^Inst|awk '{print $2}') )
    #echo ${secpkglist[@]}
    #apt-get upgrade
    #apt-get update
}

#
#   NOTE: This function will be called from TSconfig.py as well.  Watch the
#   globals!
#
function preinst_system_packages ()
{
    echo "Function: preinst_system_packages" 1>&2

    user_msg "=================================================================="
    user_msg "Updating previous configurations"
    user_msg "=================================================================="

	# Cleanup old installations
	cleanup_previousInstallations

    # Is there room in /var/ to update?
    log "Deleting obsolete deb packages from cache"
    apt-get autoclean 1>&2

    # Reconfigure apt cache archives directory
    config_apt_cache

    # Fix high system load due to leap second issue
    # http://www.novell.com/support/kb/doc.php?id=7010351
    date -s "$(LC_ALL=C date)" > /dev/null

    if is_master; then
        # Preseed the master gridengine settings
        debconf-set-selections << EOF
gridengine-exec         shared/gridenginemaster string $(hostname -f)
gridengine-common       shared/gridenginecell   string iontorrent
gridengine-common       shared/gridengineconfig boolean true
EOF
        # rabbitmq-server install needs preseed
        debconf-set-selections << EOF
rabbitmq-server rabbitmq-server/upgrade_previous note
EOF
        # rabbitmq-server upgrade to from before 3.0 needs it's conf file removed
        RMQ_VERSION=`dpkg -l rabbitmq-server|awk '$2 ~ "rabbitmq-server" {print $3}'`
        #if [[ $RMQ_VERSION < '3.0' ]] && [[ -f /usr/sbin/rabbitmqctl ]]; then
        if [[ ! $RMQ_VERSION == '' ]] && [[ $RMQ_VERSION < '3.0' ]]; then
            echo Resetting rabbitmq-server, $RMQ_VERSION 1>&2
            # http://www.rabbitmq.com/clustering.html#upgrading
            service rabbitmq-server stop 1>&2
            rm -rf /var/lib/rabbitmq/mnesia/ 1>&2
        else
            echo Not resetting rabbitmq-server, $RMQ_VERSION 1>&2
        fi
    else
        # Preseed the execute gridengine settings
        # sge_master_host is user input on initial config; else its defined in this file
        if [ -z ${sge_master_node} ]; then
            sge_master_node=$(cat /var/lib/gridengine/iontorrent/common/act_qmaster)
        fi
        debconf-set-selections << EOF
gridengine-exec         shared/gridenginemaster string ${sge_master_node}
gridengine-common       shared/gridenginecell   string iontorrent
gridengine-common       shared/gridengineconfig boolean true
EOF
    fi

    # postfix install needs preseed
    debconf-set-selections << EOF
#postfix shared/chattr  boolean  false
#postfix shared/destinations string quark01.ite, localhost.ite, , localhost
#postfix shared/mailbox_limit string 0
postfix postfix/mailname string $(hostname -f)
postfix postfix/main_mailer_type string  Internet Site
postfix shared/mailname string $(hostname -f)
postfix shared/main_mailer_type string  Internet Site
#postfix shared/mynetworks string 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128
#postfix shared/procmail boolean false
#postfix shared/protocols string all
#postfix shared/recipient_delim string +
EOF

    # tmpreaper package posts a security notice requiring user acknowledgement
    debconf-set-selections << EOF
tmpreaper	tmpreaper/readsecurity	note
tmpreaper	tmpreaper/TMPREAPER_TIME	note
tmpreaper	tmpreaper/confignowexists	note
tmpreaper	tmpreaper/readsecurity_upgrading	note
EOF

    # samba update will prompt user for input if config has been modified.
    # We override this questioning.
    debconf-set-selections << EOF
samba-common    samba-common/encrypt_passwords  boolean true
samba-common    samba-common/dhcp   boolean	false
samba-common    samba-common/do_debconf boolean	true
EOF

    # TS-6230
    if dpkg -l libapache2-mod-jk|tail -1|grep -q ^ii; then
        echo "Forcing reinstall of jk.load file" 1>&2
        apt-get -o Dpkg::Options::="--force-confnew" --reinstall install --assume-yes --force-yes libapache2-mod-jk 1>&2
    fi
    if dpkg -l ion-jk|tail -1|grep -q ^ii; then
        echo "Forcing reinstall of ion-jk" 1>&2
        apt-get -o Dpkg::Options::="--force-confnew" --reinstall install --assume-yes --force-yes ion-jk 1>&2
    fi

}

function preinst_ion_packages ()
{
    echo "Function: preinst_ion_packages" 1>&2
    # As of TS 4.0, ion-pgmupdates1.1 package is to be removed
    if dpkg -l ion-pgmupdates1.1|tail -1|grep -q ^ii; then
        dpkg -r ion-pgmupdates1.1 1>&2
    fi
    # TS-9993: this package has an old rabbitmq which is incompatible 4.4 and newer
    if dpkg -l python-librabbitmq|tail -1|grep -q ^ii; then
        dpkg --purge python-librabbitmq 1>&2
    fi

    return 0
}

function install_system_packages ()
{
    echo "Function: install_system_packages" 1>&2
    user_msg "=================================================================="
    user_msg "Installing system packages"
    user_msg "=================================================================="

    server_files=
    master_files=
    read_packagelist_file system allservers server_files
    if is_master; then
        read_packagelist_file system master master_files
        pkg_list=( ${server_files[@]} ${master_files[@]} )
    else
        pkg_list=( ${server_files[@]} )
    fi

    if ! pkg_installation ${pkg_list[@]}; then
        error ${LINENO} "In function install_system_packages"
    fi
    return 0
}

function install_ion_packages()
{
    echo "Function: install_ion_packages" 1>&2
    user_msg "=================================================================="
    user_msg "Installing Ion Torrent Suite packages"
    user_msg "=================================================================="

    server_files=
    master_files=
    read_packagelist_file torrentsuite allservers server_files
    if is_master; then
        read_packagelist_file torrentsuite master master_files
        pkg_list=( ${server_files[@]} ${master_files[@]} )

        #Load proton specific packages if this is Proton Torrent Server
        inst_files=
        if is_proton_ts; then
            proton_files=
            read_packagelist_file torrentsuite proton proton_files
            read_packagelist_file torrentsuite pgm inst_files
            pkg_list=( ${server_files[@]} ${master_files[@]} ${inst_files[@]} ${proton_files[@]} )
        else
            #Default to PGM specific packages
            read_packagelist_file torrentsuite pgm inst_files
            pkg_list=( ${server_files[@]} ${master_files[@]} ${inst_files[@]} )
        fi
    else
        pkg_list=( ${server_files[@]} )
    fi

    if ! pkg_installation ${pkg_list[@]}; then
        error ${LINENO} "In function install_ion_packages"
    fi

    # verify package installation
    ERRCNT=0
    for i in ${pkg_list[@]}
    do
        i=${i,,}    # to lower case.  dpkg database is all lowercase despite what the package filename might contain
        user_msg "Verifying $i"
        if [ "ii" != "$(dpkg -l ${i}|tail -1|awk '{print $1}')" ]; then
            ((ERRCNT++)) || echo "Error detected"   # or statement required to prevent early exit
        fi
    done

    if [ $ERRCNT -gt 0 ]; then
        user_msg
        user_msg "There was an error installing Ion software packages."
        user_msg "Critical Error."
        user_msg "Aborting the configuration now"
        user_msg
        dpkg -l "ion-*" samtools
        user_msg
        exit 1
    fi
}

function config_ion_packages ()
{
    echo "Function: config_ion_packages" 1>&2
    #----------------------------------
    # Make sure Ion system daemons are running
    #----------------------------------
    if is_master; then

        if ! service ionCrawler status 1>&2; then
            /etc/init.d/ionCrawler start 1>&2 || error ${LINENO} "In function config_ion_packages"
        fi
        if ! service ionJobServer status 1>&2; then
            /etc/init.d/ionJobServer start 1>&2 || error ${LINENO} "In function config_ion_packages"
        fi
        if ! service ionPlugin status 1>&2; then
            /etc/init.d/ionPlugin start 1>&2 || error ${LINENO} "In function config_ion_packages"
        fi
        if ! service rabbitmq-server status 1>&2; then
            service rabbitmq-server start 1>&2 || error ${LINENO} "In function config_ion_packages"
        fi
        if ! service celeryd status 1>&2; then
            /etc/init.d/celeryd start 1>&2 || error ${LINENO} "In function config_ion_packages"
        fi
        #if ! service celerybeat status 1>&2; then  # does not support status argument
            /etc/init.d/celerybeat restart 1>&2 || error ${LINENO} "In function config_ion_packages"
        #fi
        if ! service tomcat6 status 1>&2; then
            /etc/init.d/tomcat6 start 1>&2 || error ${LINENO} "In function config_ion_packages"
        fi
    fi

    # With 3.6, separate tmap package is no longer distributed; tmap is part of ion-analysis package
    # In order to not cause confusion, we remove the tmap package
    if dpkg -l tmap|tail -1|grep -q ^ii; then
        echo "Removing deprecated package: tmap.  Package ion-analysis now provides tmap." 1>&2
        #apt-get --assume-yes --force-yes remove tmap 1>&2 || true
        dpkg --purge --ignore-depends=ion-dbreports tmap 1>&2 || true
        echo "removal done." 1>&2
    fi
    if dpkg -l python-django-celery|tail -1|grep -q ^ii; then
        dpkg --purge --ignore-depends=ion-dbreports python-django-celery 1>&2
    fi
    if dpkg -l python-django-kombu|tail -1|grep -q ^ii; then
        dpkg --purge python-django-kombu 1>&2
    fi
    if dpkg -l python-amqplib|tail -1|grep -q ^ii; then
        dpkg --purge python-amqplib 1>&2
    fi

    return 0
}

function reconfig_ion_packages ()
{
    echo "=================================================================="
    echo "Re-running configuration of Torrent Suite packages"
    echo ""
    #NEW - just run the postinst script for Torrent Suite packages that are installed
    server_files=
    master_files=
    read_packagelist_file torrentsuite allservers server_files
    if is_master; then
        read_packagelist_file torrentsuite master master_files
        pkg_list=( ${server_files[@]} ${master_files[@]} )
    else
        pkg_list=( ${server_files[@]} )
    fi


    for pkg in ${pkg_list[@]}; do
        echo $pkg
        if [ "${pkg,,}" == "ion-torrentr" ]; then
            # skip ion-torrentr pkg because it tries to download files
            echo -e "\tSkipping $pkg reconfiguration (it attempts to download files)"
            echo -e "\tYou can manually reconfigure $pkg with: sudo dpkg-reconfigure $pkg"
        elif [ "$pkg" == "ion-publishers" ]; then
            # skip ion-publishers because it only restarts celery and apache.
            echo -e "\tSkipping $pkg reconfiguration (it restarts celeryd and apache2)"
            echo -e "\tYou can manually reconfigure $pkg with: sudo dpkg-reconfigure $pkg"
        else
            dpkg-reconfigure $pkg 1>&2 || true
        fi
    done
    echo "=================================================================="
}
#--------------------------------------
# System Configuration Operations
#
# NOTE: Must be non-interactive
#--------------------------------------
function config_system_packages ()
{
    echo "Function: config_system_packages" 1>&2

    if is_master; then
    #--------------------------------------
    # Master Node Only Options
    #--------------------------------------
        #NOTE: dbreports cannot install until postgres iondb is setup
        config_postgres

        #NOTE: apache2 log rotation, original code from ion-dbreports' postinst.in
        config_apache2

        if ! config_master_sge; then error ${LINENO} "In function config_master_sge"; fi

        # Generate dbase backup files and maintain them with logrotate
        logrotate_iondb

    else
    #--------------------------------------
    # Compute Node Only Options
    #--------------------------------------
        if ! config_compute_sge; then error ${LINENO} "In function config_compute_sge"; fi
    fi

    named_core_files

    config_grub_menu || true

    #NOTE: required: ionian user be created prior to initial installation of ion-dbreports
    initialize_system_users

    # limit the size of log files generated in /var.
    set_logfile_size_limit

    # Remove motd regarding available OS upgrade: do not want TS customers to do this.
    rm -f /etc/update-motd.d/91-release-upgrade || true

    # Disable checking for updates
    sed -i 's/^[Pp]rompt=.*/prompt=never/' /etc/update-manager/release-upgrades

    # Configure tmpreaper package to purge old files from /tmp directory
    if [ -e /etc/tmpreaper.conf ]; then
        sed -i 's/^SHOWWARNING=true/#SHOWWARNING=true/' /etc/tmpreaper.conf
        sed -i 's/^.*TMPREAPER_TIME=.*/TMPREAPER_TIME=7d/' /etc/tmpreaper.conf
    fi

    # Configure maximum number of open file descriptors allowed
    set_max_open_files

    # SGE changes:
    set_sge_open_files

}

function logrotate_iondb ()
{
    # Generate dbase backup files and maintain them with logrotate
    if [ ! -r /etc/logrotate.d/iondb ]; then
        cat >> /etc/logrotate.d/iondb <<EOF
/results/dbase_backup/*.sql {
	daily
	rotate 30
	missingok
	compress
	compressext .gz
	nodelaycompress
    copytruncate
	create 644 postgres postgres
#	dateext
	prerotate
	/usr/bin/pg_dump -U ion -c iondb > /results/dbase_backup/iondb.sql
	endscript
}
EOF
    else
        echo "/etc/logrotate.d/iondb file exists" 1>&2
    fi
    # Needs one file to rotate on, else all is lost - it will never execute prerotate script
    mkdir -p /results/dbase_backup
    touch /results/dbase_backup/iondb.sql
}

function set_logfile_size_limit ()
{
    # Set a maximum size of 100MB for all log files.
    # This gets overridden if a package sets its own size limit in logrotate.d
    if ! grep -q ^size /etc/logrotate.conf; then
        echo -e "# Torrent Server maximum log file limit\nsize 100M\n" |cat - /etc/logrotate.conf > /tmp/logrotate.conf && mv /tmp/logrotate.conf /etc/logrotate.conf
    fi
}

function named_core_files ()
{
	# Enable named core files
	CORESTRING="kernel.core_pattern=core.%e.%p.%h.%t"
	sed -i "/kernel\.core_pattern/d" /etc/sysctl.conf
	echo $CORESTRING >> /etc/sysctl.conf
	sysctl -p 1>&2
}
function remote_loghost()
{
	# Enables logs to go to remote host, if remote is configured
	if [ -w /etc/rsyslog.conf ]
	then
		sed -i "/loghost/d" /etc/rsyslog.conf
		echo "*.* @loghost" >> /etc/rsyslog.conf
	else
		echo "Could not edit /etc/rsyslog.conf"
		echo "This is not a critical edit so continuing with configuration"
	fi
}
function config_grub_menu()
{
	if [ -r /etc/default/grub ]; then

		sed -i 's/\(GRUB_HIDDEN_TIMEOUT_QUIET=\).*/\1false/' /etc/default/grub
		sed -i 's/\(GRUB_HIDDEN_TIMEOUT=\).*/\15/' /etc/default/grub
		/usr/sbin/update-grub
		if [ $? != 0 ]; then
			echo "update-grub failed."
			return 1
		fi
	else
		echo "Could not find /etc/default/grub"
		echo "Could not modify grub config"
		return 1
	fi
	return 0
}

function release_pkg_holds ()
{
    # Releases the hold on all packages with that designation
    dpkg --get-selections > /tmp/pkgs_installed

    #---    mark all packages as 'install'  ---#
    sed -i 's/\shold.*/install/' /tmp/pkgs_installed

    #---    put all packages to install ---#
    cat /tmp/pkgs_installed | dpkg --set-selections
    rm -f /tmp/pkgs_installed
}

function set_pkg_holds ()
{
    pkgList=(
        grub-common
        grub-pc
        linux-headers-server
        linux-image-server
        linux-server
    )
    for pkg in ${pkgList[@]}; do
        echo "$pkg hold"|dpkg --set-selections
    done
}

function initialize_system_users ()
{
    user_msg "=================================================================="
    user_msg "Initializing required users and groups"
    user_msg "=================================================================="

    #
    # Create ionadmin user which historically is created during OS install
    #
    if ! getent passwd | grep -q "^ionadmin:"; then

        echo -n "Adding system user ionadmin..."
        pass=ionadmin # default password
        encryptedpass=$(perl -e "print crypt($pass, 'password')" $password)
        useradd -m -s /bin/bash -p $encryptedpass -G admin ionadmin
		echo "done"
    fi

    #---										---#
	#---	Create system user to run plugins	---#
    #---	Using UID=1100, GID==1100			---#
    #---										---#
	pluginUser='ionian'
	pluginGroup='ionian'
    if ! getent group | grep -q "^$pluginGroup:" ; then
        #echo -n "Adding group $pluginGroup.."
        addgroup --system $pluginGroup --gid 1100 1>&2 ||true
        #echo "..done"
    fi
	if ! getent passwd | grep -q "^$pluginUser:"; then
        #echo -n "Adding system user $pluginUser.."
    	adduser --system \
                         --uid 1100 \
                         --ingroup $pluginGroup \
                         --disabled-password \
                         $pluginUser 1>&2 || true
		#echo "..done"
    else
        # Make sure existing pluginUser has a home directory
        if [ ! -d /home/$pluginUser ]; then
            mkdir -p /home/$pluginUser
            chown -R $pluginUser.$pluginGroup /home/$pluginUser
        fi
        usermod --home /home/$pluginUser $pluginUser
    fi

    #---	ionadmin, www-data should be in ionian group	---#
    if ! groups ionadmin | cut -d: -f2 | grep -qw $pluginGroup; then
		adduser ionadmin $pluginGroup 1>&2
    fi
    if ! groups www-data | cut -d: -f2 | grep -qw $pluginGroup; then
		adduser www-data $pluginGroup 1>&2
    fi
    #---    ionadmin should have read/write permission on www-data group    ---#
    if ! groups ionadmin | cut -d: -f2 | grep -qw www-data; then
		adduser ionadmin www-data 1>&2
    fi
}

function config_apache2 ()
{
    # Default apache logging interval is not good when there is heavy traffic and lots of logging
    # can clog the /var partition.  We set a file size limit and change logrotate to run once an
    # hour for apache.
    local configfile='/etc/logrotate.d/apache2'
    #--- Set file size limit
    if [ -w $configfile ]; then
        # Set number of files to keep
        sed -i 's/\([[:blank:]]\)rotate.*/\1rotate 10/' $configfile
        # Set max size of file
        if ! grep -q size $configfile; then
            # missing; add it as first option after open brace
            sed -i 's/{$/&\n\tsize 50M/' $configfile
        else
            # exists; make sure its set to value we want
            sed -i 's/\([[:blank:]]\)size.*/\1size 50M/' $configfile
        fi
        # Set compression on all files immediately
        sed -i "s/\([[:blank:]]\)delaycompress/\1nodelaycompress/" $configfile

        # Set force rotation daily
        sed -i "s/\([[:blank:]]\)weekly/\1daily/" $configfile
    else
        echo "Could not edit apache2 log rotate config file: $configfile"
        echo "Not critical so configuration script will continue."
    fi

    #--- Set apache to run logrotate once per hour (instead of once per day)
    if ! cp -f /etc/cron.daily/logrotate /etc/cron.hourly/; then
        echo "There was an error setting up logrotate to run once an hour"
        echo "Not critical so configuration script will continue."
    fi

    # Enable required apache modules
    /usr/sbin/a2enmod wsgi headers ssl setenvif deflate filter expires rewrite include 1>&2
    # Note: wsgi and ssl are non-core and installed separately. Check depends list

}

function deny_ssh_access ()
{
    deny_user=$1

    if ! grep -q ^DenyUsers /etc/ssh/sshd_config; then
        # DenyUsers directive does not exist; add it
        echo "DenyUsers $deny_user" >> /etc/ssh/sshd_config
    else
        # DenyUsers directive exists; make sure $deny_user is in the list
        if ! echo $directive|grep -q $deny_user; then
            # add $deny_user to list of denied users
            sed -i "/^DenyUsers/ {/$deny_user/! s/.*/& $deny_user/}" /etc/ssh/sshd_config
        fi
    fi
}

function config_ftp()
{
    echo "Configuring FTP server" 1>&2
    user_msg "=================================================================="
    user_msg "Configuring FTP server"
    user_msg "=================================================================="
    ftpUser="ionguest"
    ftpPass="ionguest"
    if [ -f /etc/vsftpd.conf ]; then
        # create ftp user, if it doesn't yet exist
        if ! getent passwd | grep -q "^$ftpUser:"; then
        sudo useradd -m $ftpUser -s /bin/sh
        sudo passwd $ftpUser <<EOFftp
$ftpPass
$ftpPass
EOFftp
        fi

        #Deny ssh access for this user
        deny_ssh_access $ftpUser

#        # disable login shell access
#        # N.B. DO NOT ENABLE!  This diables ftp access
#        status=$(expect -c "
#        spawn chsh -s /bin/false $ftpUser
#        expect {
#        assword: {send \"$ftpPass\n\"; exp_continue}
#        }
#        exit
#        ")

        # this directory is created elsewhere (?) but want to make sure it exists
        # if it exists, make sure it is writeable
        # N.B. cluster setups probably don't write raw data to /results
        #mkdir -p /results
        if [ -d /results ]; then chmod 777 /results || true; fi
        if [ -d /rawdata ]; then chmod 777 /rawdata || true; fi

        # create link to /results; directory where the PGMs write their data files.
        # To support newer hardware, where there is a /rawdata partition we use that
        # partition for raw data symlink, else we default to original /results.
        # /home/ionguest/results -> [ /results | /rawdata ]
        #
        if [ -d /rawdata ]; then
            ionguest_ftp_symlink /rawdata
        else
            ionguest_ftp_symlink /results
        fi

        sed -i "s/^#local_enable.*/local_enable=YES/" /etc/vsftpd.conf
        sed -i "s/^#write_enable.*/write_enable=YES/" /etc/vsftpd.conf
        sed -i "s/^#local_umask.*/local_umask=000/" /etc/vsftpd.conf

        #--- Restrict ftp access to ftp user only  ---#
        # create control file if not existing
        if [ ! -f /etc/vsftpd.allowed_users ]; then
            touch /etc/vsftpd.allowed_users
        fi

        # add ftp user to control file if not existing
        if ! grep -q $ftpUser /etc/vsftpd.allowed_users; then
            echo $ftpUser >> /etc/vsftpd.allowed_users
        fi

        # add control configuration to conf file if not existing
        if ! grep -q ^userlist_deny /etc/vsftpd.conf; then
            echo "userlist_deny=NO" >> /etc/vsftpd.conf
        else
            sed -i "s/userlist_deny.*/userlist_deny=NO/" /etc/vsftpd.conf
        fi
        if ! grep -q ^userlist_enable /etc/vsftpd.conf; then
            echo "userlist_enable=YES" >> /etc/vsftpd.conf
        else
            sed -i "s/userlist_enable.*/userlist_enable=YES/" /etc/vsftpd.conf
        fi
        if ! grep -q ^userlist_file /etc/vsftpd.conf; then
            echo "userlist_file=/etc/vsftpd.allowed_users" >> /etc/vsftpd.conf
        else
            sed -i "s:userlist_file.*:userlist_file=/etc/vsftpd.allowed_users:" /etc/vsftpd.conf
        fi

        user_msg "See /etc/vsftpd.conf"
        user_msg "See /etc/vsftpd.allowed_users"
        user_msg "See /home/$ftpUser/results"
        service vsftpd restart 1>&2
        return 0
    else
        user_msg "Missing config file.  Is vsftpd package installed?"
        user_msg "run apt-get install vsftpd"
        error ${LINENO} 1
    fi
}


function config_postgresql_cluster_access()
{
    #
    # Allow cluster nodes to access database
    #   Uncomment, if commented-out
    #   Edit to allow any host to connect
    #
    PSCONF=$(find /etc/postgresql -name postgresql.conf 2>/dev/null)
    sed -i "s/^#listen_addresses/listen_addresses/" $PSCONF
    sed -i "s/listen_addresses = [^#]*/listen_addresses = '*'\t/" $PSCONF

    PGHBACONF=$(find /etc -name pg_hba.conf 2>/dev/null)
    # Remove existing cluster access permission line first
    sed -i '/host\siondb\sion/d' $PGHBACONF

    classA=-1
    ipadd=$(/sbin/ifconfig ${ETH_DEV} | awk '/inet / { print $2 } ' | sed -e s/addr://)
    if [ ! -z $ipadd ]; then
        classA=$(echo ${ipadd} | cut -d"." -f 1)
        if [ $classA -gt 0 ] && [ $classA -lt 256 ]; then
            # set permissions to allow access to any server on class A network address.
            su - postgres -c "echo -e \"host\tiondb\tion\t${classA}.0.0.0/8\ttrust\" >> $PGHBACONF"
        else
            echo "In function config_postgresql_cluster_access:"
            echo "Error determining IP address.  Postgres will likely not allow external server access."
            echo "If external access to the database is required, (i.e., clustered, multi-node site)"
            echo "make sure the ${ETH_DEV} port has a valid IP address and re-run set-up"
        fi
    else
        echo "In function config_postgresql_cluster_access:"
        echo "Error determining IP address.  Postgres will likely not allow external server access."
        echo "If external access to the database is required, (i.e., clustered, multi-node site)"
        echo "make sure the ${ETH_DEV} port has a valid IP address and re-run set-up"
    fi

    if cmd=$(basename $(find /etc/init.d -name postgresql\*)); then
        invoke-rc.d $cmd reload 1>&2
    else
        log "Could not reload postgres database"
    fi
}

function config_postgres()
{
    echo "Postgresql Configuration" 1>&2
    user_msg "=================================================================="
    user_msg "Configuring Postgresql"
    user_msg "=================================================================="

    # Make sure server is running
    PS_SCRIPT=$(find /etc/init.d -name "postgresql*")
    if [ "$PS_SCRIPT" != "" ]; then
        if ! $PS_SCRIPT status 1>&2; then
            if ! $PS_SCRIPT start 1>&2; then
                echo "Could not start postgres database service" 1>&2
                error ${LINENO} 1
            fi
        else
            echo "Postgresql service is running..." 1>&2
        fi
    else
        echo "Could not find postgres start-up script.  Is postgresql package installed?" 1>&2
        error ${LINENO} 1
    fi

    # Make sure server will start at boot
    update-rc.d $(basename $PS_SCRIPT) defaults 06 1>&2

    # Prime the database server with the empty ion database
    if which psql 1>&2; then

sudo -u postgres psql 1>&2 << EOFdb
CREATE USER ion WITH PASSWORD 'ion';
CREATE DATABASE iondb;
GRANT ALL PRIVILEGES ON DATABASE iondb to ion;
\q
EOFdb

    else
        echo "Missing psql executable.  Is postgresql package installed?" 1>&2
        echo "run apt-get install postgresql" 1>&2
        user_msg "=================================================================="
        user_msg "ERROR. Could not configure postgresql database"
        user_msg "=================================================================="
        error ${LINENO} 1
    fi

    #
    # Allow access to database from apache webserver
    #
    PGHBACONF=$(find /etc/postgresql -name pg_hba.conf 2>/dev/null)
    su - postgres -c "sed -i 's/peer/trust/' $PGHBACONF"
    su - postgres -c "sed -i 's/md5/trust/' $PGHBACONF"
    su - postgres -c "sed -i 's/ident/trust/' $PGHBACONF"
    su - postgres -c "sed -i 's/ident sameuser/trust/' $PGHBACONF"

    #
    # Set some sane operational parameter values: postgresql.conf
    #
    sqlconffile=$(find /etc/postgresql -name postgresql.conf 2>/dev/null)
    sqlshmfile=/etc/sysctl.d/10-postgresql-shm.conf

    if [ -f $sqlconffile ]; then
        # Make sure options are enabled
        sed -i 's/^#effective_cache_size/effective_cache_size/' $sqlconffile
        sed -i 's/^#work_mem/work_mem/' $sqlconffile
        sed -i 's/^#commit_delay/commit_delay/' $sqlconffile
        sed -i 's/^#checkpoint_segments/checkpoint_segments/' $sqlconffile
        # Set appropriate values for the options
        sed -i 's/^effective_cache_size.*/effective_cache_size = 16GB/' $sqlconffile
        sed -i 's/^work_mem.*/work_mem = 2MB/' $sqlconffile
        sed -i 's/^commit_delay.*/commit_delay = 1000/' $sqlconffile
        sed -i 's/^checkpoint_segments.*/checkpoint_segments = 16/' $sqlconffile

        if [ -f $sqlshmfile ]; then

            # only set these if shmmax can be set
            sed -i 's/^#shared_buffers/shared_buffers/' $sqlconffile
            sed -i 's/^shared_buffers.*/shared_buffers = 512MB/' $sqlconffile

            # Set kernel shmmax
            sed -i 's/^#kernel.shmmax/kernel.shmmax/' $sqlshmfile
            sed -i 's/^kernel.shmmax.*/kernel.shmmax = 1073741824/' $sqlshmfile

            /sbin/sysctl -p $sqlshmfile 1>&2
        fi

        #DEBUG
        egrep '(^shared_buffers|^effective_cache_size|^work_mem|^commit_delay|^checkpoint_segments)' $sqlconffile 1>&2
    else
        echo -e "*\n* Could not edit $sqlconffile to set optimized postgres parameters\n*" 1>&2
    fi

    # Reload configuration files
    $PS_SCRIPT reload 1>&2

    #
    # Allow access to database from cluster nodes
    #
    #config_postgresql_cluster_access

    # NOTE: config_postresql_cluster_access function also restarts the database service

    # Make a backup of the database.  This is intended to backup an existing TS
    # prior to installing ion-dbreports which usually makes db changes.
    BACKUP_DBASE_DIR=/results
    if [ -d $BACKUP_DBASE_DIR ]; then
        user_msg "=================================================================="
        user_msg "\tCreating backup of postgresql database"
        user_msg "=================================================================="
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        BACKUP_DBASE_FILE="${BACKUP_DBASE_DIR}/iondb.${TIMESTAMP}.backup"
        /usr/bin/pg_dump -U ion -c iondb | gzip > "${BACKUP_DBASE_FILE}.gz" || true

        # Keep 5 most recent dbase backup files
        KEEP=5
        filecmd="ls -rt ${BACKUP_DBASE_DIR}/iondb.*.backup.gz"
        FILES=($($filecmd 2>/dev/null || true))
        cnt=${#FILES[@]}
        while [ $cnt -gt $KEEP ]; do
            rm -f ${FILES[0]}
            FILES=($($filecmd 2>/dev/null || true))
            cnt=${#FILES[@]}
        done
    fi
    return 0

    #--- NOTES ON POSTGRESQL ---#
    # To remove an existing database, do the following commands
    # service ionCrawler stop
    # service ionJobServer stop
    # service ionPlugin stop
    # service celeryd stop
    # service apache2 stop
    # dropdb -i -e iondb -U postgres
}

#---                                                                        ---#
#---    Specifies host and port of Torrent Server Daemons                   ---#
#---                                                                        ---#
function config_cluster_settings()
{
    # Default to 'localhost' if $idaemon_host is not defined
    idaemon_host=${idaemon_host:-localhost}

    # Edit the local cluster_settings file
    settings_file="$TSCONFIG_DIR/local_cluster_settings.py"
    if [ -f $settings_file ]; then
        sed -i "s/^PLUGINSERVER_HOST =.*/PLUGINSERVER_HOST = '$idaemon_host'/" $settings_file
        sed -i "s/^JOBSERVER_HOST =.*/JOBSERVER_HOST = '$idaemon_host'/" $settings_file
        sed -i "s/^CRAWLER_HOST =.*/CRAWLER_HOST = '$idaemon_host'/" $settings_file
    else
        echo "PLUGINSERVER_HOST = '$idaemon_host'" >> $settings_file
        echo "JOBSERVER_HOST = '$idaemon_host'" >> $settings_file
        echo "CRAWLER_HOST = '$idaemon_host'" >> $settings_file
    fi
    #return 0
}

#---                                            ---#
#---    Add our warning message to top of file  ---#
#---                                            ---#
function add_warning_msg()
{
    #
    #   DON"T USE THIS WITH SCRIPTS WHERE THE TOP LINE
    #   NEEDS TO SPECIFY AN INTERPRETER
    #

    file="${1}"
    if (! grep -q "^# WARNING" ${file}); then

        IFS=$","
        for l in ${TEXT_WARN_MSG[@]}; do echo -ne $l >>_tmpfile; done
        unset IFS

        cat ${file} >> _tmpfile
        cp _tmpfile ${file} && rm _tmpfile

    fi
}


function config_master_torque()
{
    # qsub -l nodes=1:ppn=4:gpus=1

    currentNodeName=$(hostname -f)
    numProcessors=$(grep processor /proc/cpuinfo | wc -l)

    invoke-rc.d pbs_mom stop
    invoke-rc.d pbs_server stop
    invoke-rc.d pbs_sched stop

    killall pbs_mom pbs_sched pbs_server || true
    killall -s SIGKILL pbs_mom pbs_sched pbs_server || true

    update-rc.d pbs_mom defaults
    update-rc.d pbs_server defaults
    update-rc.d pbs_sched defaults
    hostname --long > /var/spool/torque/server_priv/nodes
    hostname --long > /var/spool/torque/server_name
    hostname --long > /var/spool/torque/mom_priv/config
    #ps aux | grep -v grep | grep -q pbs_server || pbs_server -t create
    invoke-rc.d pbs_server start
    invoke-rc.d pbs_sched start
    invoke-rc.d pbs_mom start
    qmgr -c "s s scheduling=true"
    qmgr -c "c q batch queue_type=execution"
    qmgr -c "s q batch started=true"
    qmgr -c "s q batch enabled=true"
    qmgr -c "s q batch resources_default.nodes=1"
    qmgr -c "s q batch resources_default.walltime=3600"
    qmgr -c "s s default_queue=batch"

    # add node
    qmgr -c "create node $currentNodeName state=free" -e
    qmgr -c "set node $currentNodeName np = $numProcessors" -e

    return 0
}

function default_slots ()
{

    # determine number of slots by number of sockets.  T-7500 have two sockets
    # with 4 cores in each socket.  T-3500 have one socket.  For now, we use the
    # number of sockets == number of slots.
    # handle different lscpu output format
    if grep -q "^Socket(s)" <(lscpu); then
        sockets=$(lscpu|grep "^Socket(s)"|awk '{print $2}')
    elif grep -q "^CPU socket" <(lscpu); then
        sockets=$(lscpu|grep "^CPU socket"|awk '{print $3}')
    else
        echo 1
    fi
    cores_per_socket=$(lscpu|grep "^Core(s) per socket:"|awk '{print $4}')
    #slots=$(($sockets * $cores_per_socket)) # number total cores
    slots=$(($sockets * 1))
    if [ -z $slots ]; then slots=2; fi

    echo $slots
}

function config_master_sge()
{
    currentNodeName=$(hostname -f)
    echo "Configuring Sun Grid Engine" 1>&2
    user_msg "=================================================================="
    user_msg "Configuring Sun Grid Engine"
    user_msg "=================================================================="

    # Ensure that the master daemon is running
    /etc/init.d/gridengine-exec stop
    /etc/init.d/gridengine-master restart 1>&2

    # this is required empirically.  its cheesy and needs to be fixed but it works.
    # no sleep will fail, 1 sec seems to work, 5 seems safe.
    sleep 5

    add_warning_msg /etc/hosts

    #---
    # define the dhcp_ip variable
    #---
    get_Netmask

    test -x $(which qconf) || echo "ERROR: cannot execute qconf" || exit 0

    # add user
    user_name=$(grep ^name /usr/share/ion-tsconfig/sge-configuration/user.template|awk '{print $2}')
    if ! qconf -suserl | grep -q $user_name; then
        #NOT idempotent
        if ! qconf -Auser /usr/share/ion-tsconfig/sge-configuration/user.template 1>&2; then
            echo "ERROR: SGE config failed setting user"
            return 1
        fi
    fi

    # List of queues to create
    sgequeues=( all.q tl.q thumbnail.q thumbnail_worker.q )

    #setup all.q queue
    #setup tl.q queue
    for qname in ${sgequeues[@]}; do
        #echo "Checking $qname sge queue"
        if ! qconf -sql | grep -q $qname; then
            #NOT idempotent
            qtmpfile=`mktemp`
            sed s/QUEUENAME/$qname/g /usr/share/ion-tsconfig/sge-configuration/queue.template > $qtmpfile
            if ! qconf -Aq $qtmpfile 1>&2; then
                user_msg "ERROR: SGE config failed setting $qname queue"
                return 1
            fi
            rm -f $qtmpfile

            #set number of default slots for this queue
            if [ "$qname" == "tl.q" ]; then
                set_slots=10
            else
                set_slots=$(default_slots)
            fi
            if ! qconf -aattr queue slots $set_slots $qname 1>&2; then
                user_msg "ERROR: SGE config failed setting slots on $qname"
                return 1
            fi
        else
            echo "$qname queue already exists.  Nothing to do." 1>&2
        fi
    done

    #Special case:T620 hardware in standalone systems to change number of slots to 4.
    hardwarename=$(echo_system_product_name)
    if [ "$hardwarename" == "PowerEdge T620" ]; then
        # Assume that only TS serving Proton instruments will have ion-protonupdates installed.
        if is_proton_ts; then
            slots=4
            qconf -mattr queue slots $slots all.q 1>&2
        fi
    fi

    # Set the all.q load_thresholds       np_load_avg=95.0
    qconf -mattr queue load_thresholds np_load_avg=95.0 all.q 1>&2
    qconf -mattr queue load_thresholds np_load_avg=95.0 thumbnail.q 1>&2
    qconf -mattr queue load_thresholds np_load_avg=95.0 thumbnail_worker.q 1>&2
    qconf -mattr queue load_thresholds np_load_avg=95.0 tl.q 1>&2

    # add execution host
    #Wait!  host is already an execution host!  This never executes!
    if ! qconf -sel | grep -q $currentNodeName; then
        hosttmpfile=`mktemp`
        sed s/YOUR_TS_HOSTNAME/$currentNodeName/g /usr/share/ion-tsconfig/sge-configuration/host.template > $hosttmpfile
        #NOT idempotent
        if ! qconf -Ae $hosttmpfile 1>&2; then
            user_msg "ERROR: SGE config failed setting host node"
            return 1
        fi
        rm -f $hosttmpfile
    fi

    # add submission host; idempotent
    if ! qconf -as $currentNodeName 1>&2; then
        user_msg "ERROR: SGE config failed setting submission host"
        return 1
    fi

    #add host to queues; idempotent
    for qname in ${sgequeues[@]}; do
        if ! qconf -aattr queue hostlist $currentNodeName $qname 1>&2; then
            user_msg "ERROR: SGE config failed setting hostlist"
            return 1
        fi
    done

# N.B. This is commented out because at this point in the code, the number of slots is always already set
# so this code is useless.
#
#    # Slots for all.q
#    # if slots are already set, use existing number
#    if qconf -sq all.q|grep -q $currentNodeName; then
#        set_slots=$(qhost -q -h $currentNodeName|grep all.q|awk '{print $3}'|cut -d/ -f 3)
#        if [ -z $set_slots ]; then
#            set_slots=$(default_slots)
#        fi
#    else
#        set_slots=$(default_slots)
#    fi
#    #set number of slots for this host;idempotent
#    if ! qconf -aattr queue slots "[$currentNodeName=$set_slots]" all.q; then
#        echo "ERROR: SGE config failed setting slots"
#        return 1
#    fi
#
#    # Slots for tl.q
#    # if slots are already set, use existing number.
#    #tl.q can have high slot number since only non-compute intensive jobs are submitted
#    slots_tlq=10
#    if qconf -sq tl.q|grep -q $currentNodeName; then
#        set_slots=$(qhost -q -h $currentNodeName|grep tl.q|awk '{print $3}'|cut -d/ -f 3)
#        if [ -z $set_slots ]; then
#            set_slots=$slots_tlq
#        fi
#    else
#        set_slots=$slots_tlq
#    fi
#    #set number of slots for this host;idempotent
#    if ! qconf -aattr queue slots "[$currentNodeName=$set_slots]" tl.q; then
#        echo "ERROR: SGE config failed setting slots"
#        return 1
#    fi

    # Create parallel environment
    pe_name=$(grep ^pe_name /usr/share/ion-tsconfig/sge-configuration/ion_pe.template|awk '{print $2}')
    if ! qconf -spl | grep -q $pe_name; then
        #NOT idempotent
        if ! qconf -Ap /usr/share/ion-tsconfig/sge-configuration/ion_pe.template 1>&2; then
            user_msg "ERROR: SGE config failed creating ion_pe parallel environment"
            return 1
        fi
    fi

    # Add parallel environment to the queue; idempotent
    for qname in ${sgequeues[@]}; do
        if ! qconf -aattr queue pe_list ion_pe $qname 1>&2; then
            user_msg "ERROR: SGE config failed adding to $qname ion_pe parallel environment"
            return 1
        fi
    done

    # Add ionadmin user as sge admin (if ionadmin is a valid user)
    if getent passwd | grep -q "^ionadmin:"; then
        if ! qconf -sm | grep -q ionadmin; then
            #NOT idempotent
            qconf -am ionadmin 1>&2
        else
            echo "WARNING: Could not add ionadmin user as an sge administrator" 1>&2
        fi
    fi

    #   --------------------------------------------------------------------
    #   Modify scheduler interval to be 4 seconds
    #   --------------------------------------------------------------------
    schedtemp=$(mktemp)
    qconf -ssconf | sed 's/^schedule_interval.*/schedule_interval                 0:0:04/' > $schedtemp
    qconf -Msconf $schedtemp
    rm -f $schedtemp

    #   --------------------------------------------------------------------
    #   Create an SGE queue for the plugin applications
    #   --------------------------------------------------------------------
    # SGE Configuration Changes - Make mem_free a consumable resource
    COMPLEX=/tmp/complexresources.$$
    qconf -sc > ${COMPLEX}
    sed -i 's:^mem_free .*:mem_free            mf         MEMORY      <=   YES         YES        0        0:' ${COMPLEX}
    # Add export_plugins consumable resource
    if ! grep -q export_plugins ${COMPLEX}; then
        echo "export_plugins            ep         INT      <=   YES         YES        0        0" >> ${COMPLEX}
    else
        sed -i 's:^export_plugins .*:export_plugins            ep         INT      <=   YES         YES        0        0:' ${COMPLEX}
    fi
    qconf -Mc ${COMPLEX}
    rm -f "${COMPLEX}"
    # For network-using plugins, set a consumable resource to control bandwidth utilization
    NET_CR=10   # Needs experimenting to determine maximum network resource units
    # ERROR: Was added per-host. Remove and set as global consumable
    if ! qconf -dattr exechost complex_values export_plugins $currentNodeName 1>&2; then
        user_msg "WARN: unable to clear export_plugins on $currentNodeName. Not set?"
    fi
    if ! qconf -aattr exechost complex_values export_plugins=10 global 1>&2; then
        user_msg "ERROR: unable to set export_plugins consumable resource"
    fi

    # Restart sge exec daemon

    setupQueue=1
    S_RT_LIMIT='24:00:00'       # 24 hours
    H_RT_LIMIT='24:00:05'
    S_VMEM_LIMIT='48G'          # Upper limit on mem use
    H_VMEM_LIMIT='48G'
    # Setting vmem causes s_stack to default to vmem, which is too
    # high for threaded tasks. Force down to the normal OS limit of 8M
    S_STACK_LIMIT='8M'

    #---    Test for existing plugin.q and skip creation if so  ---#
    if qconf -sq plugin.q > /dev/null; then
        setupQueue=0
        # Ensure current hostname is in plugin queue configuration
        qname="plugin.q"
        if ! qconf -aattr queue hostlist $currentNodeName $qname 1>&2; then
            user_msg "ERROR: SGE config failed setting hostlist"
            return 1
        fi
    fi
    if [ $setupQueue -eq 1 ]; then

            # Remove a queue
            #qconf -dq plugin.q 2>/dev/null || true

            # Generate a default cluster queue template file
            # from existing all.q file
            qconf -sq all.q > /tmp/pluginqueue.template

            #---                            ---#
            #---    Queue-specific changes  ---#
            #---                            ---#
            # Change name of queue in template
            sed -i 's/all.q/plugin.q/' /tmp/pluginqueue.template

            # bash shell NB: space after shell string vital
            sed -i 's:^shell .*:shell                 /bin/bash:' /tmp/pluginqueue.template

            # run time limits
            sed -i "s/^s_rt.*/s_rt                  ${S_RT_LIMIT}/" /tmp/pluginqueue.template
            sed -i "s/^h_rt.*/h_rt                  ${H_RT_LIMIT}/" /tmp/pluginqueue.template

            # job priority (nice)
            sed -i 's/^priority.*/priority      10/' /tmp/pluginqueue.template

            # job slots

            # memory limit - sets ulimit -v
            sed -i "s/^s_vmem.*/s_vmem                  $S_VMEM_LIMIT/" /tmp/pluginqueue.template
            sed -i "s/^h_vmem.*/h_vmem                  $H_VMEM_LIMIT/" /tmp/pluginqueue.template

            sed -i "s/^s_stack.*/s_stack                  $S_STACK_LIMIT/" /tmp/pluginqueue.template

            # Queue cannot set default value for mem_free or virtual_free complex resources
            # echo "complex_values   mem_free=20G" >> # /tmp/pluginqueue.template

            sed -i "s|^prolog.*|prolog                  /usr/share/ion-tsconfig/gridengine-scripts/plugin-prolog.sh|" /tmp/pluginqueue.template
            sed -i "s|^epilog.*|epilog                  /usr/share/ion-tsconfig/gridengine-scripts/plugin-epilog.sh|" /tmp/pluginqueue.template

            sed -i "s/np_load_avg=.*/np_load_avg=75.0/" /tmp/pluginqueue.template

            # Create new queue from template file
            # This command returns true when queue already exists or creation error
            qconf -Aq /tmp/pluginqueue.template

            rm -f /tmp/pluginqueue.template
    else
        echo "plugin.q already exists" 1>&2

        # Ensure that existing queue has non-infinite limits on runtime
        if qconf -sq plugin.q | grep s_rt | grep -v "${S_RT_LIMIT}"; then
            qconf -aattr queue s_rt "${S_RT_LIMIT}" plugin.q 1>&2
        fi
        if qconf -sq plugin.q | grep h_rt | grep -v "${H_RT_LIMIT}"; then
            qconf -aattr queue h_rt "${H_RT_LIMIT}" plugin.q 1>&2
        fi

        # Ensure that existing queue has non-infinite limits on memory
        if qconf -sq plugin.q | grep s_vmem | grep INFINITY; then
            qconf -aattr queue s_vmem $S_VMEM_LIMIT plugin.q 1>&2
        fi
        if qconf -sq plugin.q | grep h_vmem | grep INFINITY; then
            qconf -aattr queue h_vmem $H_VMEM_LIMIT plugin.q 1>&2
        fi
        if qconf -sq plugin.q | grep s_stack | grep INFINITY; then
            qconf -aattr queue s_stack $S_STACK_LIMIT plugin.q 1>&2
        fi

        # Prolog and epilog scripts
        if qconf -sq plugin.q | grep prolog | grep NONE 1>&2; then
            qconf -aattr queue prolog "/usr/share/ion-tsconfig/gridengine-scripts/plugin-prolog.sh" plugin.q 1>&2
        fi
        if qconf -sq plugin.q | grep epilog | grep NONE 1>&2; then
            qconf -aattr queue epilog "/usr/share/ion-tsconfig/gridengine-scripts/plugin-epilog.sh" plugin.q 1>&2
        fi

        qconf -mattr queue load_thresholds np_load_avg=75.0 plugin.q 1>&2
    fi

    # SGE: Set per-host maximum mem_free to be node physical mem
    # Must be manually set to be consumable resource
    # hostname $1, mem_total $5.
    qhost | awk 'NR>3 {
            print "qconf -mattr exechost complex_values mem_free=" $5,$1
        }' | sh 1>&2
    #for node in $(qconf -sel); do
    #    qconf -mattr exechost complex_values mem_free=48G $node # fixed at 48G
    #done

    #/etc/init.d/gridengine-exec stop
    #/etc/init.d/gridengine-master restart
    /etc/init.d/gridengine-exec start

    # Enable rotation of gridengine messages file
    cp $TSCONFIG_SRC_DIR/sge-configuration/sge.logrotate /etc/logrotate.d/sge

    return 0
}


function config_compute_sge()
{
    currentNodeName=$(hostname -f)

    echo "Configuring Sun Grid Engine" 1>&2
    user_msg "=================================================================="
    user_msg "Configuring Sun Grid Engine"
    user_msg "=================================================================="

    # ===================================================
    # Fix fqdn setting in bootstrap
    # ===================================================
    if grep ignore_fqdn /var/lib/gridengine/iontorrent/common/bootstrap | grep -q false; then
        sed -i 's/^ignore_fqdn.*/ignore_fqdn             true/' /var/lib/gridengine/iontorrent/common/bootstrap

        # Need to whack gridengine daemon
        kill -9 $(pgrep sge_execd)
        service gridengine-exec restart
    fi

    # ===================================================
    # add execution host
    if ! qconf -sel | grep -q $currentNodeName; then
        hosttmpfile=`mktemp`
        sed s/YOUR_TS_HOSTNAME/$currentNodeName/g /usr/share/ion-tsconfig/sge-configuration/host.template > $hosttmpfile
        #NOT idempotent
        if ! qconf -Ae $hosttmpfile 1>&2; then
            user_msg "ERROR: SGE config failed setting host node"
            return 1
        fi
        rm -f $hosttmpfile
    fi

    # Set the number of slots in all.q to either existing slots or default otherwise
    if qconf -sq all.q|grep -q $currentNodeName; then
        set_slots=$(qhost -q -h $currentNodeName|grep all.q|awk '{print $3}'|cut -d/ -f 3)
        if [ -z $set_slots ]; then
            set_slots=$(default_slots)
        fi
    else
        set_slots=$(default_slots)
    fi

    if ! qconf -aattr queue slots "[$currentNodeName=$set_slots]" all.q 1>&2; then
        user_msg "ERROR: error setting slots on all.q"
        return 1
    fi

#    # FIXME - get correct number of CPUs;idempotent
#    if ! qconf -aattr queue slots "[$currentNodeName=$(default_slots)]" all.q; then
#        echo "ERROR: error setting slots"
#        return 1
#    fi

    # FIXME - get correct memory value;idempotent
    if ! qconf -mattr exechost complex_values mem_free=48G $currentNodeName 1>&2; then
        user_msg "ERROR: error setting mem_free"
        return 1
    fi

    # ERROR: export set on hosts, should be global. Remove it.
    if ! qconf -dattr exechost complex_values export_plugins $currentNodeName 1>&2; then
        user_msg "WARN: unable to clear export_plugins on $currentNodeName. Not set?"
    fi

    #add host to queues
    #TODO: when host is first added to queue, disable it.  All other times, do nothing.
    sgequeues=( all.q plugin.q thumbnail.q thumbnail_worker.q )
    for qname in ${sgequeues[@]}; do
        if ! qconf -aattr queue hostlist $currentNodeName $qname 1>&2; then
            user_msg "WARNING: SGE config failed adding host to $qname"
            return 1
        #else
        #    # When host successfully added to queue, disable it.  When a new compute node is
        #    # getting configured, at this point it is not ready yet for jobs.
        #    qmod -d ${qname}@${currentNodeName}
        fi
    done

    # Set number of plugin.q slots to existing number, or default to 2
    if qconf -sq plugin.q|grep -q $currentNodeName; then
        set_slots=$(qhost -q -h $currentNodeName|grep plugin.q|awk '{print $3}'|cut -d/ -f 3)
        if [ -z $set_slots ]; then
            set_slots=2
        fi
    else
        set_slots=2
    fi
    if ! qconf -aattr queue slots "[$currentNodeName=$set_slots]" plugin.q 1>&2; then
        user_msg "ERROR: error setting slots"
        return 1
    fi

    # Set ourselves as a submit host; idempotent
    if ! qconf -as $currentNodeName 1>&2; then
        user_msg "ERROR: could not set this host as a submit host"
        return 1
    fi

    # Add ionadmin user as sge admin (if ionadmin is a valid user)
    if getent passwd | grep -q "^ionadmin:"; then
        if ! qconf -sm | grep -q ionadmin; then
            #NOT idempotent
            qconf -am ionadmin 1>&2
        else
            echo "WARNING: Could not add ionadmin user as an sge administrator" 1>&2
        fi
    fi

    # Restart sge.  in case its not running?
    /etc/init.d/gridengine-exec restart 1>&2

    # Enable rotation of gridengine messages file
    cp $TSCONFIG_SRC_DIR/sge-configuration/sge.logrotate /etc/logrotate.d/sge

    return 0
}

function config_password()
{
    clear
    echo
    echo
    echo "It is critical that you change the default ionadmin password."
    echo "Failure to do so opens up the potential for malicious hackers"
    echo "to access your server and data"
    echo
    echo
    while [ 1 ]
    do
        echo "Change the password for user ionadmin"
        if passwd ionadmin; then
            break
        else
            echo -e "\n"
        fi
    done
}

#--------------------------------------
# This gets called from TSchkconfig
# Prior to reboot, act_qmaster file is updated
#--------------------------------------
function change_hostname_sge ()
{
    # Variables
    conffile='/var/lib/gridengine/iontorrent/common/act_qmaster'
    oldName=$1
    newName=$2

    if is_master; then

        # Change hostname in all the queues
        sgequeues=$(qconf -sql)
        for qname in ${sgequeues[@]}; do
            tmpqueue=$(mktemp)
            #store current queue configuration
            qconf -sq $qname > $tmpqueue
            #Rename old qmaster hostname in queue configuration files
            sed -i "s/$oldName/$newName/g" $tmpqueue
            #Define the new queues
            qconf -Mq $tmpqueue
            # add new host as submit host
            qconf -as ${newName}
            rm -f $tmpqueue
        done

        # TODO: Remove old hostname from exec list and admin list.  Others?

        #NOTE: all the compute nodes will now need to be reset to the new qmaster host
    else
        set -x
        echo "Compute Node Renaming in development"
        set +x
    fi

    # Remove old hostname from exec host list
    qconf -de ${oldName} || true
}

function config_iptables()
{
    echo "Configuring Firewall (iptables)" 1>&2
    user_msg "=================================================================="
    user_msg "Configuring Firewall (iptables)"
    user_msg "=================================================================="
    # compute nodes get different network subnets
    if is_master; then isCN=0; else isCN=1; fi

    # Create backup of current rules file
    if [ -e /etc/iptables.rules ]; then rotate /etc/iptables.rules; fi

    #--- Write out the iptables rules file ---#
    PORT=$(outbound_net_port)
    user_msg "See /etc/iptables.rules"
    cat >> /etc/iptables.rules <<EOFRules
#iptables.rules for Torrent Server
*nat
:PREROUTING ACCEPT [22:1936]
:POSTROUTING ACCEPT [2:127]
:OUTPUT ACCEPT [2:127]
-A POSTROUTING -s 192.168.2${isCN}1.0/24 -o $PORT -j MASQUERADE
-A POSTROUTING -s 192.168.2${isCN}2.0/24 -o $PORT -j MASQUERADE
-A POSTROUTING -s 192.168.2${isCN}3.0/24 -o $PORT -j MASQUERADE
-A POSTROUTING -s 192.168.2${isCN}4.0/24 -o $PORT -j MASQUERADE
-A POSTROUTING -s 192.168.2${isCN}5.0/24 -o $PORT -j MASQUERADE

COMMIT
*filter
:INPUT DROP [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [3:364]
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p icmp -j ACCEPT

#Allow SSH and Torrent Browser access
-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT

#Uncomment the line below to allow connections on port 443/HTTPS
-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT

#Allow all traffic from internal subnet
-A INPUT -s 192.168.201.0/24 -j ACCEPT
-A INPUT -s 192.168.202.0/24 -j ACCEPT
-A INPUT -s 192.168.203.0/24 -j ACCEPT
-A INPUT -s 192.168.204.0/24 -j ACCEPT
-A INPUT -s 192.168.205.0/24 -j ACCEPT

COMMIT
EOFRules

    # Add customer customization opportunity
    if [ ! -e /etc/iptables.custom ]; then
        touch /etc/iptables.custom
        user_msg "See /etc/iptables.custom"
    fi

    #---    Add warning message ---#
    add_warning_msg /etc/iptables.rules

    #--- Enable iptables at network start ---#
    # Delete line starting up iptables
    sed -i '/iptables-restore/d' /etc/network/interfaces

    #--- delete all consecutive blank lines, allows 0 blanks at top, 1 at EOF ---#
    sed -i '/./,/^$/!d' /etc/network/interfaces
    echo "pre-up iptables-restore < /etc/iptables.rules" >> /etc/network/interfaces
    echo "pre-up iptables-restore --noflush < /etc/iptables.custom" >> /etc/network/interfaces
    user_msg "See /etc/network/interfaces"

    # Enable new iptables
    /sbin/iptables-restore < /etc/iptables.rules
    /sbin/iptables-restore --noflush < /etc/iptables.custom

    return 0
}

function is_valid_ipaddress ()
{
    # Need three dots
    numdots=$(echo $1|grep -o "\."|wc -l)
    if [ $numdots -ne 3 ]; then
        echo "Malformed ipaddress: $1" >&2
        return 1
    fi

    # Need no spaces
    # numerals only
    # values from 1 to 255 then 0 to 255 then 1 to 255
    IFS=" "
    for num in `echo $1 | awk -F. '{print $1, $4}'`; do
        if [ $num -ge 1 -a $num -le 255 ]; then
            # its good
            :
        else
            echo "Invalid IP address: $1"
            return 1
        fi
    done
    for num in `echo $1 | awk -F. '{print $2, $3}'`; do
        if [ $num -ge 0 -a $num -le 255 ]; then
            # its good
            :
        else
            echo "Invalid IP address: $1"
            return 1
        fi
    done
    return 0
}

function is_valid_netmask ()
{
    # Need three dots
    numdots=$(echo $1|grep -o "\."|wc -l)
    if [ $numdots -ne 3 ]; then
        echo "Malformed ipaddress: $1" >&2
        return 1
    fi

    # Need no spaces
    # numerals only
    # values from 1 to 255
    IFS=" "
    for num in `echo $1 | awk -F. '{print $1, $2, $3, $4}'`; do
        if [ $num -ge 0 -a $num -le 255 ]; then
            # its good
            :
        else
            echo "Invalid netmask: $1"
            return 1
        fi
    done
    return 0
}

# Checks if an ethernet port exists
function valid_port ()
{
    grep -q $1 /proc/net/dev
    valid=$?
    return $valid
}

function getnetworkIP ()
{
    if [ -z $1 ]; then exit 1; fi
    echo `/sbin/ifconfig $1|grep "inet "|awk '{print $2}'|cut -d: -f2`
}
function getsubnetmask ()
{
    if [ -z $1 ]; then exit 1; fi
    echo `/sbin/ifconfig $1|grep "inet "|awk '{print $4}'|cut -d: -f2`
}
function getgateway ()
{
    echo `/sbin/route -n | grep "^0.0.0.0"|awk '{print $2;exit}'`
}

function config_PGM_interface()
{
    # compute nodes get different network subnets
    if is_master; then isCN=0; else isCN=1; fi

    #--- Remove any previous definitions for interfaces ---#
    sed -i '/auto eth1/,/netmask 255.255.255.0/d' /etc/network/interfaces
    sed -i '/auto eth2/,/netmask 255.255.255.0/d' /etc/network/interfaces
    sed -i '/auto eth3/,/netmask 255.255.255.0/d' /etc/network/interfaces
    sed -i '/auto eth4/,/netmask 255.255.255.0/d' /etc/network/interfaces
    sed -i '/auto eth5/,/netmask 255.255.255.0/d' /etc/network/interfaces

    #--- delete all consecutive blank lines, allows 0 blanks at top, 1 at EOF ---#
    sed -i '/./,/^$/!d' /etc/network/interfaces

#--- Add interface definitions ---#
#
# Here, we want Head Node subnets to be .201, .202, .203, .204 and
# compute node subnets to be .211, .212, .213, .214
# variable ${isCN} is either 0 or 1.
#
interfaces=( 1 2 3 4 5 )
for i in ${interfaces[@]}; do
    if (valid_port eth${i}); then

        cat >> /etc/network/interfaces <<EOFNIC

auto eth${i}
iface eth${i} inet static
address 192.168.2${isCN}${i}.1
netmask 255.255.255.0
EOFNIC

    else
        echo "interface eth${i} is invalid. Not configured." 1>&2
    fi

done

    #--- Enable packet forwarding ---#
    sed -i 's/^#net.ipv4.ip_forward/net.ipv4.ip_forward/' /etc/sysctl.conf
    sed -i 's/^net.ipv4.ip_forward.*/net.ipv4.ip_forward=1/' /etc/sysctl.conf

    sysctl -p 1>&2


    return 0
}


function config_dhcp()
{
    echo "Configuring DHCP Server" 1>&2
    user_msg "=================================================================="
    user_msg "Configuring DHCP Server"
    user_msg "=================================================================="
#--- ENABLE DNS SERVER ---#
#---                                                                        ---#
#---    Use DNS provided by dnsmasq; but turn off DHCP provided by dnsmasq  ---#
#---                                                                        ---#
    # compute nodes get different network subnets
    if is_master; then isCN=0; else isCN=1; fi

    #--- Delete any existing config file ---#
    if [ -w /etc/dnsmasq.d/ion-dhcp ]; then
        rm -f /etc/dnsmasq.d/ion-dhcp
    fi

    echo "no-hosts" > /etc/dnsmasq.d/ion-dhcp
    echo "addn-hosts=/etc/hosts-dnsmasq" >> /etc/dnsmasq.d/ion-dhcp
    PORT=$(outbound_net_port)
    echo "no-dhcp-interface=$PORT" >> /etc/dnsmasq.d/ion-dhcp
    interfaces=( 1 2 3 4 5 )
    for i in ${interfaces[@]}; do
        if valid_port eth${i}; then echo -e "interface=eth${i}\nno-dhcp-interface=eth${i}\n" >> /etc/dnsmasq.d/ion-dhcp; fi
    done
    user_msg "See /etc/dnsmasq.d/ion-dhcp"
    #--- Remove any pre-existing entries in /etc/hosts ---#
    #---    Cleans out older TSconfigged hosts files
    sed -i '/^192.168.1.1.*/d' /etc/hosts
    sed -i '/^192.168.201.10.*/d' /etc/hosts
    sed -i '/^192.168.202.10.*/d' /etc/hosts
    sed -i '/^192.168.203.10.*/d' /etc/hosts
    sed -i '/^192.168.204.10.*/d' /etc/hosts

    #---    Overwrite existing hosts-dnsmasq    ---#
    echo "# $(date)" > /etc/hosts-dnsmasq
    echo -e "192.168.1.1\tts" >> /etc/hosts-dnsmasq
    interfaces=(1 2 3 4 5)
    for i in ${interfaces[@]}; do
        if valid_port eth${i}; then echo -e "192.168.2${isCN}${i}.10\tpgm${i}" >> /etc/hosts-dnsmasq;fi
    done

    user_msg "See /etc/hosts-dnsmasq"

    add_warning_msg /etc/dnsmasq.d/ion-dhcp

    #---    Enable reading of dnsmasq config file   ---#
    sed -i 's:^#conf-dir.*:conf-dir=/etc/dnsmasq.d:' /etc/dnsmasq.conf
    user_msg "See /etc/dnsmasq.conf"

#--- ENABLE DHCP SERVER ---#

    #--- Backup old config file ---#
    if [ -w /etc/dhcp3/dhcpd.conf ]; then
        mv /etc/dhcp3/dhcpd.conf /etc/dhcp3/dhcpd.conf.old
    fi

    #---                            ---#
    #--- Write out new config file  ---#
    #---                            ---#
cat >> /etc/dhcp3/dhcpd.conf <<EOFDHCP
ddns-update-style none;
default-lease-time 300;
max-lease-time 300;
log-facility local7;
option domain-name "pgm.local";
EOFDHCP

interfaces=( 1 2 3 4 5 )
for i in ${interfaces[@]}; do
    if valid_port eth$i; then

        cat >> /etc/dhcp3/dhcpd.conf <<EOFDHCP
# Torrent Server internal subnet
subnet 192.168.2${isCN}$i.0 netmask 255.255.255.0 {
    range 192.168.2${isCN}$i.10 192.168.2${isCN}$i.10;
    option subnet-mask  255.255.255.0;
    option broadcast-address 192.168.2${isCN}$i.255;
    option routers 192.168.2${isCN}$i.1;
    option domain-name-servers 192.168.2${isCN}$i.1;
    option netbios-name-servers 192.168.2${isCN}$i.1;
}
EOFDHCP

    else
        echo "dhcp config: port eth$i invalid, not configuring" 1>&2
    fi
done


    add_warning_msg /etc/dhcp3/dhcpd.conf
    user_msg "See /etc/dhcp3/dhcpd.conf"

    #---    Edit dhclient.conf          ---#
    if [ -e /etc/dhcp3/dhclient.conf ]; then
        mv /etc/dhcp3/dhclient.conf /etc/dhcp3/dhclient.conf.orig
    fi
    PORT=$(outbound_net_port)
    cat >> /etc/dhcp3/dhclient.conf <<EOFDHCLIENT
option rfc3442-classless-static-routes code 121 = array of unsigned integer 8;

send host-name "<hostname>";

interface "$PORT"
{
request subnet-mask, broadcast-address, time-offset, routers,
        domain-name, domain-name-servers, domain-search, host-name,
        netbios-name-servers, netbios-scope, interface-mtu,
        rfc3442-classless-static-routes, ntp-servers;
}
EOFDHCLIENT

    user_msg "See /etc/dhcp3/dhclient.conf"

    #TODO: Enable proper error checking on return code here
    service dhcp3-server restart 1>&2 || true

    return 0
}

function config_ntp_server ()
{
    echo "Configuring Network Time Protocol server" 1>&2
    user_msg "=================================================================="
    user_msg "Configuring Network Time Protocol server"
    user_msg "=================================================================="
    if [ -w /etc/ntp.conf ]; then
        if ! grep -q "^restrict 192.168.0.0" /etc/ntp.conf; then
            echo "restrict 192.168.0.0 mask 255.255.0.0 nomodify notrap" >> /etc/ntp.conf
        fi
        user_msg "See /etc/ntp.conf"
        service ntp restart 1>&2
    else
        echo
        echo "Could not edit ntp.conf"
        echo
        echo "You need to contact support in order to"
        echo "correctly setup the NTP (Network Time Protocol) Service on this"
        echo "server."
        echo
    fi
}

#---                                ---#
#--- Test for root permissions      ---#
#---                                ---#
function needs_root()
{
    if [ $(id -u) != 0 ]; then
        echo "Please run this script with root permissions:"
        echo
        echo "sudo $0"
        echo
        exit 1
    fi
    return 0
}

function config_samba()
{
    echo "Configuring Samba Server" 1>&2
    user_msg "=================================================================="
    user_msg "Configuring Samba Server"
    user_msg "=================================================================="
    if [ ! -w /etc/samba/smb.conf ]; then
        echo "Cannot write /etc/samba/smb.conf"
        return 1
    else
        echo "Modifying /etc/samba/smb.conf"
    fi

    # Remove any Torrent Server setup
    sed -i '/Torrent Server Settings Start/,/Torrent Server Settings End/d' /etc/samba/smb.conf

    # Append Torrent Server setup
    echo -e "# Torrent Server Settings Start" >> /etc/samba/smb.conf
    echo -e "[results]" >> /etc/samba/smb.conf
    echo -e "\tpath = /results" >> /etc/samba/smb.conf
    echo -e "\twriteable = no" >> /etc/samba/smb.conf
    echo -e "guest ok = yes" >> /etc/samba/smb.conf
    echo -e "# Torrent Server Settings End" >> /etc/samba/smb.conf

    return 0
}


function rotate()
{
    MAXINDEX=5
    # list files in reverse order
    filename="$1"
    for file in $(ls -r "$filename"* 2>/dev/null); do
        if [ "$file" == "$filename" ]; then
            # echo "add an extension";
            #echo "$file -> $file.1"
            mv $file $file.1
            continue
        fi

        extension=${file##*.}

        if [[ $extension -ge $MAXINDEX ]]; then
            #echo "remove $file";
            rm -f $file
        else
            # echo "increment index extension by 1"
            #echo "$file -> ${file%.*}.$(($extension+1))"
            mv $file ${file%.*}.$(($extension+1))
        fi
    done
}

function rotate_log_oldversion()
{
    MAXINDEX=5
    # list files in reverse order
    list=( $TSCONFIG_INSTALL_LOG $TSCONFIG_DEBUG_LOG )
    for filename in ${list[@]}; do
        for file in $(ls -r $TSCONFIG_LOG_DIR/$filename* 2>/dev/null); do
            name=$(basename $file)
            if [ "$name" == "$filename" ]; then
                # echo "add an extension";
                # echo "$file -> $file.1"
                mv $file $file.1
                continue
            fi

            extension=${name##*.}

            if [[ $extension -ge $MAXINDEX ]]; then
                # echo "remove $file";
                rm -f $file
            else
                # echo "increment index extension by 1"
                # echo "$file -> ${file%.*}.$(($extension+1))"
                mv $file ${file%.*}.$(($extension+1))
            fi
        done
    done
}
#broken...
function rotate_log()
{
    list=( $TSCONFIG_LOG_DIR/$TSCONFIG_INSTALL_LOG $TSCONFIG_LOG_DIR/$TSCONFIG_DEBUG_LOG )
    for filename in ${list[@]}; do
        rotate $filename
    done
}


function echo_system_serial_number()
{
    # use the dell service tag, if present
    if ! dmidecode -s system-serial-number 2>/dev/null; then
    	# no dell service tag present.  perhaps we are in a vm.
    	if [ -f /var/spool/ion/serial_number.alt ]; then
    		# no dell service tag is present, but there is already a serial number set up.  use that.
    		cat /var/spool/ion/serial_number.alt | sed s/^serialnumber://
    	else
    		# no dell service tag present, and no serial number has been assigned; pick a random one.
			sn=`uuidgen`
			# since this case occurs only when in a vm, prefix the serial number with tsvm.
			echo tsvm$sn
		fi
    fi
}

function echo_system_product_name()
{
    if ! dmidecode -s system-product-name 2>/dev/null | sed 's/^[ \t]*//;s/[ \t]*$//'; then
        echo "Not Specified"
    fi
}

#---                                                            ---#
#---    This creates/edits the tsconf.conf file                 ---#
#---                                                            ---#
function write_conf_file()
{
    conflog="$TSCONFIG_DIR/$TSCONFIG_CONF"

    if [ -e $conflog ]; then

        #--- change the date        ---#
        sed -i "s/^date:.*/date:`date`/" ${conflog}

        #--- change the hostname    ---#
        sed -i "s/^hostname:.*/hostname:`hostname -f`/" ${conflog}

        #--- change the ip address  ---#
        if address=$(dig +short +search `hostname`); then
            single=`echo $address|awk '{print $1}'`
            sed -i "s/^ipaddress:.*/ipaddress:$single/" ${conflog}
        fi

        #--- change the mode    ---#
        if [ -f /opt/ion/.masternode ]; then mode="master"; else mode="compute"; fi
        sed -i "s/^mode:.*/mode:$mode/" ${conflog}

        #--- change the configuration   ---#
        #TODO: handle all possible configurations
        #( 'standalone' 'tsvm' 'rtsvm' )
        conf=$(get_hw_conf)
        sed -i "s/^configuration:.*/configuration:$conf/" ${conflog}

        #--- change the serial number   ---#
        sn=$(echo_system_serial_number)
        sn=$(echo $sn|sed 's/\///')    # remove any forward slashes
        sed -i "s/^serialnumber:.*/serialnumber:$sn/" ${conflog}

        #--- change the hardware name   ---#
        hardwarename=$(echo_system_product_name)
        if ! grep -q ^hardwarename ${conflog}; then
            echo "hardwarename:\"${hardwarename}\"" >> $conflog
        else
            sed -i "s/^hardwarename:.*/hardwarename:\"${hardwarename}\"/"  ${conflog}
        fi
        #--- change the version ---#
        version="@ION_VERSION_MAJOR@.@ION_VERSION_MINOR@.@ION_VERSION_RELEASE@"
        sed -i "s/^version:.*/version:$version/" ${conflog}

    else

        #---    make sure /etc/torrentserver directory exists   ---#
        if [ ! -d $TSCONFIG_DIR ]; then
            mkdir $TSCONFIG_DIR
        fi

        #---    configuration record file   ---#
        echo -n "date:" > $conflog  # overwrites previous contents
        date >> $conflog
        echo -n "hostname:" >> $conflog
        hostname -f >> $conflog
        echo -n "ipaddress:" >> $conflog
        #hostname -I|awk '{print $1}' >> $conflog
        if address=$(dig +short +search `hostname`); then
            single=`echo $address|awk '{print $1}'`
            echo $single >> ${conflog}
        else
            echo >> ${conflog}
        fi
        echo -n "mode:" >> $conflog
        if [ -f /opt/ion/.masternode ]; then echo "master" >> $conflog; else echo "compute" >> $conflog; fi
        echo -n "configuration:" >> $conflog
        echo $(get_hw_conf) >> $conflog
        echo -n "serialnumber:" >> $conflog
        echo $(echo_system_serial_number) >> $conflog
        hardwarename=$(echo_system_product_name)
        echo "hardwarename:\"${hardwarename}\"" >> $conflog
        echo -n "version:" >> $conflog
        echo -e "@ION_VERSION_MAJOR@.@ION_VERSION_MINOR@.@ION_VERSION_RELEASE@\n" >> $conflog
    fi

    return 0
}

#=============================================================================
# Determine configuration
# Hardware, TS-VM, Raptor VM
#=============================================================================
function get_hw_conf()
{
    hardwarename=$(echo_system_product_name)
    if echo $hardwarename|grep -q VirtualBox; then
        echo "tsvm"
    elif echo $hardwarename|grep -q Bochs; then
        echo "s5vm"
    elif echo $hardwarename|grep -q "VMware Virtual Platform"; then
        echo "vmware"
    else
        echo "standalone"
    fi
}

#---
#--- This function updates some, not all fields in tsconf.conf
#---
function update_conf_file()
{
    echo "Function: update_conf_file" 1>&2
	conflog="$TSCONFIG_DIR/$TSCONFIG_CONF"

    if [ -e $conflog ]; then

    	#--- update the date        ---#
        sed -i "s/^date:.*/date:`date`/" ${conflog}

        #--- update the hostname    ---#
        sed -i "s/^hostname:.*/hostname:`hostname -f`/" ${conflog}

        #--- update the ip address  ---#
        if address=$(dig +short +search `hostname`); then
            single=`echo $address|awk '{print $1}'`
            sed -i "s/^ipaddress:.*/ipaddress:$single/" ${conflog}
        fi

        #--- update the serial number   ---#
        sn=$(echo_system_serial_number)
        sn=$(echo $sn|sed 's/\///')    # remove any forward slashes
        sed -i "s/^serialnumber:.*/serialnumber:$sn/" ${conflog}

        #--- update the hardware name   ---#
        hardwarename=$(echo_system_product_name)
        if ! grep -q ^hardwarename ${conflog}; then
            echo "hardwarename:\"${hardwarename}\"" >> $conflog
        else
            sed -i "s/^hardwarename:.*/hardwarename:\"${hardwarename}\"/"  ${conflog}
        fi

        #--- update the version ---#
        version="@ION_VERSION_MAJOR@.@ION_VERSION_MINOR@.@ION_VERSION_RELEASE@"
        sed -i "s/^version:.*/version:$version/" ${conflog}

    else
        echo "Does not exist: $conflog ... creating it now." 1>&2
        write_conf_file
    fi
}


function copy_conf_file()
{
    output="$TSCONFIG_SRC_DIR/$TSCONFIG_MINT_CONF_DIR"
    if [ ! -d $output ]; then
        mkdir $output
    fi
    date_str=$(date +"%Y.%m.%d-%H.%M.%S")
    if [ -f $1 ]; then
        fname=$(basename $1)
        cp -af $1 $output/$fname.$date_str
    fi
}

#---                                                                                    ---#
#---    Manage the symbolic link from ftp client user home to the raw data directory    ---#
#---                                                                                    ---#
function ionguest_ftp_symlink ()
{
    RAW_DATA_DIR=$1

    if [ -d /home/ionguest ]; then
        if [ -h /home/ionguest/results ]; then
            rm -f /home/ionguest/results
        else
            echo -e "\nSymbolic link does not exist" 1>&2
        fi
        ln -s ${RAW_DATA_DIR} /home/ionguest/results
        echo -e "\nCreated symlink:\n$(ls -l /home/ionguest/results)\n" 1>&2
    else
        echo -e "\nUsual ftp client user does not exist: /home/ionguest\n" 1>&2
    fi
}

function is_master ()
{
    master=1
    if [ -f $TSCONFIG_DIR/$TSCONFIG_CONF ]; then
        conf=$(grep "^mode:" $TSCONFIG_DIR/$TSCONFIG_CONF|cut -f2 -d":")
        if [ "$conf" == "master" ]; then
            master=0
            #echo "This is master"
        else
            master=1
            #echo "This is compute"
        fi
    else
        log "No $TSCONFIG_CONF configuration file found"
        if [ -e /opt/ion/.masternode ]; then
            master=0
        elif [ -e /opt/ion/.computenode ]; then
            master=1
        else
            log "No file found in /opt/ion either.  Assume its a master"
            master=0
        fi
    fi
    return $master
}

#--------------------------------------
# Enable/Disable apache2 maintenance webpage
#--------------------------------------
function enable_maintenance_mode()
{
    touch "$MAINTENANCE_WEB"
}
function disable_maintenance_mode()
{
    rm -f "$MAINTENANCE_WEB"
}

#--------------------------------------
# Error handler called from trap command
#--------------------------------------
function error ()
{
    [[ -f $MAINTENANCE_WEB ]] && rm -f $MAINTENANCE_WEB
    if [ "$PID_LOCKED" == "1" ]; then rm -rf $LOCK_FILE; fi
    local PARENT_LINENO="$1"
    local MESSAGE="$2"
    local CODE="${3:-1}"
    user_msg "=================================================================="
    if [[ -n $MESSAGE ]]; then
        user_msg "ERROR on or near line ${PARENT_LINENO}; ${MESSAGE}; exiting with status ${CODE}"
    else
        user_msg "ERROR on or near line ${PARENT_LINENO}; exiting with status ${CODE}"
    fi
    user_msg "\nSee file $TSCONFIG_LOG_DIR/$TSCONFIG_DEBUG_LOG for error details"
    user_msg "=================================================================="
    log "ERROR ${CODE}"
    if [[ -n $MESSAGE ]]; then log "${MESSAGE}"; fi
    log "LINENO: ${PARENT_LINENO}"
    exit ${CODE}
}

#---    Delete a host from SGE configuration    ---#
#---    Downloaded from                         ---#
#---    http://osdir.com/ml/clustering.gridengine.users/2007-08/msg00135.html
#---
function sge_delete_host ()
{
    #
    # Remove a host from the Grid Engine configuration
    #

    #set +u
    #set -x

    # define function to print an error message and exit
    error_exit() {
        echo "Error: $*"
        return 1
    }

    # restrict the PATH
    #export PATH=/sbin:/bin:/usr/sbin:/usr/bin

    #echo args are $*

    # create temporary directory
    tmpdir=$(mktemp -d '/tmp/sge_delete_node-XXXXXX')
    if ! cd $tmpdir; then
        error_exit Unable to change directory to $tmpdir
    fi

    # validate arguments
    [ -z "$1" ] && error_exit "usage: $(basename $0) sge-host [...]"

    # delete all the specified hosts
    for sge_host in $*; do

        for queue in $(qconf -sql); do
            qconf -purge queue slots $queue@$sge_host
            qconf -purge queue hostlist $queue@$sge_host
        done

        # delete host as submit host
        qconf -ds $sge_host || echo "Warning: Unable to remove $sge_host from submit host list"

        # delete host as SGE execution host
        qconf -de $sge_host || echo "Warning: Unable to remove $sge_host from SGE execution host list"

        # delete host from all host groups
        for host_group in $(qconf -shgrpl); do
            qconf -dattr hostgroup hostlist $sge_host $host_group || echo "Warning: Unable to remove $sge_host from host group $host_group"
        done

        # This has to be the last action
        # delete host as adminstrative host
        qconf -dh $sge_host || echo "Warning: Unable to remove $sge_host from admin host list"
    done
}

function user_msg()
{
    msg="$1"
    echo -e $msg >&1
}

function log ()
{
    msg="$@"
    logout=$TSCONFIG_LOG_DIR/$TSCONFIG_LOG_BASENAME
    echo -e "$(date +"%F %H:%M:%S") $(basename $0): $msg"  >> $logout
}

#
# Read the package list resource file which is json formatted
# Use the JSON.sh tool to parse the json file: https://github.com/dominictarr/JSON.sh
#
function read_packagelist_file()
{
    #
    # Third argument should be a variable to get defined
    #
    local FILEPATH=$TSCONFIG_PACKAGELIST_FILE
    local LISTTYPE=$1
    local SERVERTYPE=$2
    local __resultvar=$3

    local version=$(distrib_rel)

    PACKAGES=packages_${version}

    if [ ! -r $FILEPATH ]; then
        echo "Cannot read $FILEPATH" 1>&2
        exit 1
    fi

    if ! which jsonpipe > /dev/null; then
        echo "Missing jsonpipe script.  Cannot proceed" 1>&2
        exit 1
    fi

    list=$(jsonpipe < $FILEPATH | grep "/$PACKAGES/$LISTTYPE/$SERVERTYPE/" | cut -f2 | sed 's/"/ /g')
    if [ ${PIPESTATUS[0]} -ne 0 ]; then
        echo "Error parsing $FILEPATH.  Cannot proceed" 1>&2
        exit 1
    fi

    eval $__resultvar="'${list[@]}'"
}


function set_max_open_files ()
{
    echo "RUNNING:set_max_open_files" 1>&2
    local debug=0
    local CONFIG='/etc/security/limits.conf'
    local MAX_FILES_OPEN=8192

    # This will print existing lines setting file limits.
    [ $debug -eq 1 ] && {
        echo "Current $CONFIG max file settings:" 1>&2
        egrep '(root|\*).*?(hard|soft).*?(nofile).*?' $CONFIG 1>&2
        echo "-----------------" 1>&2
    }

    # The four lines we want are:
    #*                soft    nofile          8192
    #*                hard    nofile          8192
    #root             soft    nofile          8192
    #root             hard    nofile          8192

    line='*                soft    nofile          '$MAX_FILES_OPEN
    [ $debug -eq 1 ] && "Searching for $line"
    if egrep -q '(\*).*?(soft).*?(nofile).*?' $CONFIG; then
        # set the max value
        sed -i "s/\(\*.*soft.*nofile\).*/\1          $MAX_FILES_OPEN/" $CONFIG
    else
        sed -i '/^# End of file/d' $CONFIG
        echo "$line" >> $CONFIG
        echo -e "# End of file" >> $CONFIG
    fi


    line='*                hard    nofile          '$MAX_FILES_OPEN
    [ $debug -eq 1 ] && "Searching for $line"
    if egrep -q '(\*).*?(hard).*?(nofile).*?' $CONFIG; then
        # set the max value
        sed -i "s/\(\*.*hard.*nofile\).*/\1          $MAX_FILES_OPEN/" $CONFIG
    else
        sed -i '/^# End of file/d' $CONFIG
        echo "$line" >> $CONFIG
        echo -e "# End of file" >> $CONFIG
    fi


    line='root             soft    nofile          '$MAX_FILES_OPEN
    [ $debug -eq 1 ] && "Searching for $line"
    if egrep -q '(^root).*?(soft).*?(nofile).*?' $CONFIG; then
        # set the max value
        sed -i "s/\(^root.*soft.*nofile\).*/\1          $MAX_FILES_OPEN/" $CONFIG
    else
        sed -i '/^# End of file/d' $CONFIG
        echo "$line" >> $CONFIG
        echo -e "# End of file" >> $CONFIG
    fi


    line='root             hard    nofile          '$MAX_FILES_OPEN
    [ $debug -eq 1 ] && "Searching for $line"
    if egrep -q '(^root).*?(hard).*?(nofile).*?' $CONFIG; then
        # set the max value
        sed -i "s/\(^root.*hard.*nofile\).*/\1          $MAX_FILES_OPEN/" $CONFIG
    else
        sed -i '/^# End of file/d' $CONFIG
        echo "$line" >> $CONFIG
        echo -e "# End of file" >> $CONFIG
    fi

}


function set_sge_open_files ()
{
    # The configuration line we want:
    #execd_params              S_DESCRIPTORS=8192,H_DESCRIPTORS=8192
    echo "RUNNING: set_sge_open_files" 1>&2
    local MAX_FILES_OPEN=8192
    local TMP_FILE=/tmp/global  # filename required to be "global" to update the global configuration
    qconf -sconf global > $TMP_FILE
    sed -i "s/\(^execd_params[ \t]*\).*$/\1S_DESCRIPTORS=$MAX_FILES_OPEN,H_DESCRIPTORS=$MAX_FILES_OPEN/" $TMP_FILE
    qconf -Mconf $TMP_FILE
    rm -f $TMP_FILE
}

function is_proton_ts ()
{
    # If package ion-protonupdates is installed, then return 0
    if ! dpkg -l ion-protonupdates|tail -1|grep -q ^ii; then
        echo "This is not a Proton TS" 1>&2
        return 1
    else
        echo "This is a Proton TS" 1>&2
        return 0
    fi
}

# With TS3.6, we have a new web address for Ion package hosting.
# This function checks/updates /etc/apt/sources.list to include the new address
# which may offer speed advantage to sites outside US.
function updated_mirror_check()
{
    echo "Function: updated_mirror_check" 1>&2
    SRCLIST="/etc/apt/sources.list"
    APT_ENTRY="deb ${TSCONFIG_ION_UPDATE_URL}/updates/software `lsb_release -cs`/"

    if [ ! -e $SRCLIST ]; then
        echo "Does not exist:${SRCLIST}" 1>&2
        return 0
    fi

    # Rule #1: If the apt repository is the old address and an archive repository, update the address
    # Rule #2: If the apt repository is the old address, delete the line
    # Rule #3: If new address is not in file, add it

    # If line contains updates.iontorrent.com AND archive, replace address
    sed -i 's/\(updates.iontorrent.com\)\(.*archive\)/ionupdates.com\2/g' $SRCLIST

    # If line contains updates.iontorrent.com, delete it
    sed -i '/updates.iontorrent.com/d' $SRCLIST

    # If file does not contain new address, add it
    if ! grep -q "${TSCONFIG_ION_UPDATE_URL}" $SRCLIST; then
        echo "The desired apt repository entry does not exist" 1>&2
        echo $APT_ENTRY >> $SRCLIST
    else
        echo "An apt repository entry with desired web address exists" 1>&2
    fi

    # Force re-load of apt packages; if its not a USB stick install
    # Its not a USB install when this variable is undefined.
    if [ -z $APT_USB ]; then APT_USB=0; fi
    if [ $APT_USB -eq 0 ]; then
        apt-get update 1>&2 || true
    fi

    return 0
}

function config_apt_cache() {
    # Get current apt cache location
    cachepath=$(apt-config dump|grep "^Dir "|awk '{print $2}'|sed 's:[";]::g')
    cachepath=${cachepath}$(apt-config dump|grep "^Dir::Cache "|awk '{print $2}'|sed 's:[";]::g')
    cachepath=${cachepath}$(apt-config dump|grep "^Dir::Cache::archives "|awk '{print $2}'|sed 's:[";]::g')
    echo Current apt cache location is $cachepath 1>&2

    # compute nodes mount a remote /results; do not use that location
    if ! mountpoint -q /results; then
        rootdir="/"
        cachedir="results/cache/apt/"
        archivedir="archives/"
    else
        rootdir="/"
        cachedir="TSapt/cache/apt/"
        archivedir="archives/"
    fi
    newcachepath=${rootdir}${cachedir}${archivedir}

    # Already using the new cache location
    if [[ "$cachepath" == "$newcachepath" ]]; then
        echo "Current and new cache location: $newcachepath" 1>&2

        #TS-8169 - patching previous error of not cleaning up deb pgks
        mv /var/cache/apt/archives/*.deb $newcachepath || true
        apt-get update > /dev/null || true

    else

        # If total capacity is below threshold, change location
        threshold_kb=524288000 # 5GB in kbyte units
        #threshold_kb=2097152 # 2GB in kbyte units
        total_capacity=$(df -P $cachepath | awk 'NR==2 {print $2}')
        if [ ! "$total_capacity" == "" ] && [ "$total_capacity" -lt "$threshold_kb" ]; then
            log "Partition capacity is under $threshold_kb kbytes"
            log "Migrating apt cache to a larger partition"

            mkdir -p ${newcachepath}partial
            log "New apt cache location is $newcachepath"

            # Change the default apt cache directory by writing a conf file
            conffile=/etc/apt/apt.conf.d/99cache
            echo "Dir::Cache ${cachedir};" > $conffile
            echo "Dir::Cache::archives ${archivedir};" >> $conffile

            # move pkgs from old cache location
            mv /var/cache/apt/archives/*.deb $newcachepath || true
            apt-get update 1>&2 || true
        else
            echo  "Partition capacity is over $threshold_kb kbytes" 1>&2
        fi
    fi

    # Contents of 99cache ought to be (Removing the hash of course):
    # Dir::cache results/cache/apt/;
    # Dir::cache::archives archives/;
    # Don't forget to make the partial directory under the archives/:
    # mkdir -p /results/cache/apt/archives/partial

}

function install_prerequisites()
{
    # Install ansible and customize ansible configuration and keep existing configuration
    apt-get install -o Dpkg::Options::="--force-confold" -y --allow-unauthenticated ansible

    ansible_cfg="/etc/ansible/ansible.cfg"

    # Add hostname to ansible hosts definition file
    sed -i "s/LOCALHEADNODE.*/$HOSTNAME ansible_connection=local/g" /usr/share/ion-tsconfig/ansible/torrentsuite_hosts

    # Enable Ansible logging
    sed -i "s:.*log_path.*:log_path = /var/log/ion/tsconfig_debug.log:" $ansible_cfg

    # Disable strict host key checking
    sed -i "s:.*host_key_checking.*:host_key_checking = False:" $ansible_cfg

    # Set the default remote user
    sed -i "s:.*remote_user.*:remote_user = ionadmin:" $ansible_cfg

    # Set the private key file
    sed -i "s:.*private_key_file.*:private_key_file = /home/ionadmin/.ssh/ansible_rsa_key:" $ansible_cfg

    # Set the default host file
    sed -i "s:.*hostfile.*:hostfile = /usr/share/ion-tsconfig/ansible/torrentsuite_hosts:" $ansible_cfg

    # Set the default roles path
    sed -i "s:.*roles_path.*:roles_path = /usr/share/ion-tsconfig/ansible/roles:" $ansible_cfg

    # Enable pipelining to speed up ssh
    sed -i "s:#pipelining.*:pipelining = True:" $ansible_cfg
    sed -i "s:^pipelining.*:pipelining = True:" $ansible_cfg

    # Edit {{ansible_managed}} variable.  We don't want the date stamp
    sed -i "s/^ansible_managed.*/ansible_managed = Ansible managed: {file}/" $ansible_cfg

    # disable ansible deprecation warning when it is not already set in the configuration
    if ! grep -q ^deprecation_warnings $ansible_cfg; then
        # adding deprecation_warnings after [defaults] section
        sed -i "/\[defaults\]/a deprecation_warnings=False" $ansible_cfg
    fi

    # Edit contents of all_local
    if ! /usr/share/ion-tsconfig/ansible/files/update_all_local.sh; then
        echo "Error during execution of update_all_local.sh"
        echo "Check contents of all_local against all for any changes"
    fi
}

function outbound_net_port()
{
    port=$(/sbin/route | awk '/default/{print $8;exit}')
    if [[ ! -z $port ]]; then
        echo $port
    fi
}

# =============================================================================
# Returns release version number, ie 10.04, 12.04
# =============================================================================
function distrib_rel()
{
    #echo $(awk -F'=' '/DISTRIB_RELEASE/{print $2}' /etc/lsb-release)
    echo $(lsb_release -s -r)
}

# =============================================================================
# Returns release code name, ie, lucid, raring
# =============================================================================
function distrib_name()
{
    #echo $(awk -F'=' '/DISTRIB_CODENAME/{print $2}' /etc/lsb-release)
    echo $(lsb_release -s -c)
}

# =============================================================================
# Colorize terminal output
# =============================================================================
red()
{
    echo -ne '\E[31m'
}
green()
{
    echo -ne '\E[32m'
}
yellow()
{
    echo -ne '\E[33m'
}
clrclr()
{
    echo -ne '\E[0m'
}
bold()
{
    echo -ne '\033[1m'
}

function accept_eula(){
    if(whiptail --title "Torrent Suite EULA" --textbox "/opt/ion/doc/ion-tsconfig/LICENSE.txt" --scrolltext 25 75 --ok-button "Proceed to confirm" --fb); then
        if(whiptail --title "Torrent Suite EULA" --yesno "Please confirm to install the update" --scrolltext 25 75 --yes-button Accept --no-button Reject --fb); then
            echo "EULA accepted"
        else
            echo "EULA rejected"
            exit 0
        fi
    else
        echo "EULA rejected"
        exit 0
    fi
}

# Switching Repo from trusty/bionic to bionic(trusty)-genestudio and vice-versa: TS-18047
function confirm_switch_repo(){
    CHOICE=$(
      whiptail --title "Do you want to switch repo ? " --menu "You cannot revert back after the upgrade... Make your choice" 20 75 9 \
        "1)" "S5 Only"   \
        "2)" "PGM or Proton"  3>&2 2>&1 1>&3
    )
    case $CHOICE in
      "1)")
        echo "Switching Repo to $S5_REPO and checking for updates. Please wait for a few minutes.."
        echo
        MSG=`python $TS_SWITCH_REPO_PY $S5_REPO`
      ;;
      "2)")
        echo "Switching Repo $PGM_REPO and checking for updates. Please wait for a few minutes.."
        echo
        MSG=`python $TS_SWITCH_REPO_PY $PGM_REPO`
      ;;
    esac
    echo $MSG
    echo
  exit 0
}

#---                                                                        ---#
#---    Make sure to confirm the repo if Major_platform is mixed            ---#
#---                                                                        ---#
function check_switch_repo() {
  if [ $NONINTERACTIVE = False ] && [ $ENABLE_DEPRECATION == "True" ]; then # this is to avoid collision with GUI
      if [ $MAJOR_PLATFORM == "mixed" ] && [ $SWITCH_SOFTWARE == 0 ] ; then
        if [ $UPDATE_SOFTWARE == 1 ] || [ $CONF_HEAD_NODE == 1 ] ; then
            box_out "Found Proton/PGM and S5 instrument connected to your TS server"
            echo
            if [ $LSB_RELEASE == '14.04' ]; then
              DISTRIB_CODENAME="trusty"
            elif  [ $LSB_RELEASE == '18.04' ]; then
              DISTRIB_CODENAME="bionic"
            fi
            if `grep -q "^[^#].*${DISTRIB_CODENAME}-genestudio/" /etc/apt/sources.list.d/iontorrent.list`; then
                echo "Note: Switching Repo not allowed after the upgrade. Do you want to proceed with S5 only? [Y/n]"
            else
                echo "Warning: 5.14 is the last supported release for PGM/Proton. Do you want to proceed with PGM/Proton only? [Y/n]"
            fi
            read input
            case ${input:0:1} in
                y|Y )
                    echo "Proceeding with the updates...."
                ;;
                * )
                    echo "Please use --switch-repo|-w to switch the repo and then update/configure the server..."
                    print_help_1404
                    exit
                ;;
            esac
        fi
      fi
  fi
}
function box_out()
{
  local s="$*"
  tput setaf 3
  echo " -${s//?/-}-
| ${s//?/ } |
| $(tput setaf 4)$s$(tput setaf 3) |
| ${s//?/ } |
 -${s//?/-}-"
  tput sgr 0
}
